"use strict";(self.webpackChunk_elonkit_react=self.webpackChunk_elonkit_react||[]).push([[9739],{"./src/components/Spinner/Spinner.animations.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NA:()=>spinnerRotateAnimation,OZ:()=>spinnerDashAnimation,ut:()=>spinnerOpacityAnimation});var _mui_system__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/@emotion/react/dist/emotion-react.browser.esm.js");const opacityKeyframe=_mui_system__WEBPACK_IMPORTED_MODULE_0__.F4`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`,rotateKeyframe=_mui_system__WEBPACK_IMPORTED_MODULE_0__.F4`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`,strokeArrayKeyframe=_mui_system__WEBPACK_IMPORTED_MODULE_0__.F4`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }
  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }
  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -110px;
  }
`,spinnerOpacityDelay=duration=>{const animationDelay={};for(let i=7;i>0;i--)animationDelay[`& > *:nth-child(${8-i})`]={animationDelay:-i/8*duration+"ms"};return animationDelay},spinnerOpacityAnimation=(animatedElement,duration,ease)=>({...spinnerOpacityDelay(duration),[animatedElement]:_mui_system__WEBPACK_IMPORTED_MODULE_0__.iv`animation: ${opacityKeyframe} ${duration}ms ${ease} infinite;`}),spinnerRotateAnimation=(animatedElement,duration,ease)=>({[animatedElement]:_mui_system__WEBPACK_IMPORTED_MODULE_0__.iv`animation: ${rotateKeyframe} ${duration}ms ${ease} infinite; transform-origin: center;`}),spinnerDashAnimation=(duration,ease,dashEase)=>_mui_system__WEBPACK_IMPORTED_MODULE_0__.iv`
  animation:
    ${strokeArrayKeyframe} ${duration}ms ${dashEase} infinite,
    ${rotateKeyframe} ${duration}ms ${ease} infinite;
  transform-origin: center;
`},"./src/components/Spinner/SpinnerRing/SpinnerRing.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>SpinnerRing});var clsx_m=__webpack_require__("../../node_modules/clsx/dist/clsx.m.js"),generateUtilityClass=__webpack_require__("./node_modules/@mui/base/generateUtilityClass/generateUtilityClass.js");function getSpinnerRingUtilityClass(slot){return(0,generateUtilityClass.Z)("ESSpinnerRing",slot)}(0,__webpack_require__("./node_modules/@mui/base/generateUtilityClasses/generateUtilityClasses.js").Z)("ESSpinnerRing",["root","primary","secondary","monoA","inherit"]);var composeClasses=__webpack_require__("./node_modules/@mui/base/composeClasses/composeClasses.js"),styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),useThemeProps=__webpack_require__("./node_modules/@mui/material/styles/useThemeProps.js"),Spinner_animations=__webpack_require__("./src/components/Spinner/Spinner.animations.ts"),useSpinnerColor=__webpack_require__("./src/components/Spinner/useSpinnerColor.ts"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const SpinnerRingRoot=(0,styled.ZP)("svg",{name:"ESSpinnerRing",slot:"Root",overridesResolver:(props,styles)=>{const{ownerState:{color}}=props;return[styles.root,styles[color]]}})((({ownerState})=>({color:ownerState.spinnerColor,"& > path":{fill:"currentColor"},"& > circle":{stroke:"currentColor"}})),(({ownerState})=>(0,Spinner_animations.NA)("& > *",ownerState.duration,ownerState.ease))),SpinnerRing=inProps=>{const{className,sx,size=40,color="primary",duration=1e3,ease="linear",...props}=(0,useThemeProps.Z)({props:inProps,name:"ESSpinnerRing"}),ownerState={...props,color,spinnerColor:(0,useSpinnerColor.P)(color),duration,ease},classes=(ownerState=>{const{classes,color}=ownerState,slots={root:["root",color]};return(0,composeClasses.Z)(slots,getSpinnerRingUtilityClass,classes)})(ownerState);return(0,jsx_runtime.jsxs)(SpinnerRingRoot,{className:(0,clsx_m.Z)(classes.root,className),"data-testid":"svg",fill:"none",height:size,ownerState,sx,viewBox:"0 0 40 40",width:size,children:[(0,jsx_runtime.jsx)("circle",{cx:"20",cy:"20",opacity:"0.3",r:"18",strokeWidth:"4"}),(0,jsx_runtime.jsx)("path",{d:"M20 2C20 0.89543 20.8977 -0.0103805 21.9967 0.0998606C26.5677 0.558357 30.865 2.58075 34.1421 5.85786C37.4192 9.13498 39.4416 13.4323 39.9001 18.0033C40.0104 19.1023 39.1046 20 38 20C36.8954 20 36.0129 19.1011 35.8752 18.0051C35.4345 14.4972 33.8402 11.2128 31.3137 8.68629C28.7872 6.1598 25.5028 4.56551 21.9949 4.12478C20.8989 3.98709 20 3.10457 20 2Z"})]})};SpinnerRing.__docgenInfo={description:"",methods:[],displayName:"SpinnerRing",props:{classes:{required:!1,tsType:{name:"Partial",elements:[{name:"signature",type:"object",raw:"{\n  /** Styles applied to the root element. */\n  root: string;\n  /** Styles applied to the root element if `color='primary'`. */\n  primary: string;\n  /** Styles applied to the root element if `color='secondary'`. */\n  secondary: string;\n  /** Styles applied to the root element if `color='monoA'`. */\n  monoA: string;\n  /** Styles applied to the root element if `color='inherit'`. */\n  inherit: string;\n}",signature:{properties:[{key:"root",value:{name:"string",required:!0},description:"Styles applied to the root element."},{key:"primary",value:{name:"string",required:!0},description:"Styles applied to the root element if `color='primary'`."},{key:"secondary",value:{name:"string",required:!0},description:"Styles applied to the root element if `color='secondary'`."},{key:"monoA",value:{name:"string",required:!0},description:"Styles applied to the root element if `color='monoA'`."},{key:"inherit",value:{name:"string",required:!0},description:"Styles applied to the root element if `color='inherit'`."}]}}],raw:"Partial<T>"},description:"Override or extend the styles applied to the component."},className:{required:!1,tsType:{name:"string"},description:"Class applied to the root element."},sx:{required:!1,tsType:{name:"SxProps",elements:[{name:"Theme"}],raw:"SxProps<Theme>"},description:"The system prop that allows defining system overrides as well as additional CSS styles."},size:{required:!1,tsType:{name:"number"},description:"Size of the spinner component.\n@default 40"},color:{required:!1,tsType:{name:"union",raw:"'inherit' | 'primary' | 'secondary' | 'monoA'",elements:[{name:"literal",value:"'inherit'"},{name:"literal",value:"'primary'"},{name:"literal",value:"'secondary'"},{name:"literal",value:"'monoA'"}]},description:"Color of the spinner component.\n@default 'primary'"},duration:{required:!1,tsType:{name:"number"},description:"Duration of the spinner animation in milliseconds.\n@default 1000"},ease:{required:!1,tsType:{name:"string"},description:"Easing function of the spinner animation.\n@default 'linear'"}}}},"./src/components/Spinner/useSpinnerColor.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{P:()=>useSpinnerColor});var _mui_material_styles__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@mui/material/styles/useTheme.js");const useSpinnerColor=color=>{const theme=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_0__.Z)();switch(color){case"inherit":return"currentColor";case"monoA":return theme.palette[color][500];case"primary":case"secondary":return theme.palette[color][300]}}},"./src/components/SvgIcon/SvgIcon.classes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{H:()=>svgIconClasses,h:()=>getSvgIconUtilityClass});var _mui_base__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@mui/base/generateUtilityClass/generateUtilityClass.js");function getSvgIconUtilityClass(slot){return(0,_mui_base__WEBPACK_IMPORTED_MODULE_0__.Z)("ESSvgIcon",slot)}const svgIconClasses=(0,__webpack_require__("./node_modules/@mui/base/generateUtilityClasses/generateUtilityClasses.js").Z)("ESSvgIcon",["root","svg"])},"./src/components/SvgIcon/SvgIcon.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{l:()=>SvgIcon});var clsx__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../../node_modules/clsx/dist/clsx.m.js"),_SvgIcon_classes__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/SvgIcon/SvgIcon.classes.ts"),_mui_base__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@mui/base/composeClasses/composeClasses.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mui/material/styles/useThemeProps.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const SvgIconRoot=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__.ZP)("div",{name:"ESSvgIcon",slot:"Root",overridesResolver:(props,styles)=>styles.root})((()=>({userSelect:"none",display:"inline-flex",flexShrink:0,alignItems:"center",justifyContent:"center",overflow:"hidden"}))),SvgIconSvg=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__.ZP)("svg",{name:"ESSvgIcon",slot:"Svg",overridesResolver:(props,styles)=>{const{ownerState}=props;return[styles.svg,!ownerState.container&&styles.root]}})((()=>({userSelect:"none",display:"inline-flex",fill:"none",flexShrink:0}))),SvgIcon=inProps=>{const{children,className,classes:inClasses,sx,size,width,height,container,containerSize,containerWidth,containerHeight,title,ContainerProps,...props}=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_4__.Z)({props:inProps,name:"ESSvgIcon"}),classes=(ownerState=>{const{classes}=ownerState;return(0,_mui_base__WEBPACK_IMPORTED_MODULE_1__.Z)({root:["root"],svg:["svg"]},_SvgIcon_classes__WEBPACK_IMPORTED_MODULE_2__.h,classes)})({classes:inClasses,container}),svg=(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SvgIconSvg,{className:(0,clsx__WEBPACK_IMPORTED_MODULE_5__.Z)(classes.svg,!container&&[classes.root,className]),focusable:"false",sx:container?void 0:sx,...props,style:{width:width||size,height:height||size,...props.style},children:[children,title?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("title",{children:title}):null]});return container?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SvgIconRoot,{className:(0,clsx__WEBPACK_IMPORTED_MODULE_5__.Z)(classes.root,className),sx,...ContainerProps,style:{width:containerWidth||containerSize||width||size,height:containerHeight||containerSize||height||size,...ContainerProps?.style},children:svg}):svg};SvgIcon.__docgenInfo={description:"Wrapper component for the svg icons.",methods:[],displayName:"SvgIcon",props:{children:{required:!1,tsType:{name:"ReactNode"},description:""},classes:{required:!1,tsType:{name:"Partial",elements:[{name:"signature",type:"object",raw:"{\n  /** Styles applied to the root element. */\n  root: string;\n  /** Styles applied to the svg element. */\n  svg: string;\n}",signature:{properties:[{key:"root",value:{name:"string",required:!0},description:"Styles applied to the root element."},{key:"svg",value:{name:"string",required:!0},description:"Styles applied to the svg element."}]}}],raw:"Partial<SvgIconClasses>"},description:"Override or extend the styles applied to the component."},className:{required:!1,tsType:{name:"string"},description:"Class applied to the root element."},sx:{required:!1,tsType:{name:"SxProps",elements:[{name:"Theme"}],raw:"SxProps<Theme>"},description:"The system prop that allows defining system overrides as well as additional CSS styles."},size:{required:!1,tsType:{name:"string"},description:"The width and height of the icon."},width:{required:!1,tsType:{name:"string"},description:"The width of the icon."},height:{required:!1,tsType:{name:"string"},description:"The height of the icon."},container:{required:!1,tsType:{name:"boolean"},description:"If true, allows to set the container size, without resizing the svg element itself."},containerSize:{required:!1,tsType:{name:"string"},description:"The width and height of the icon container."},containerWidth:{required:!1,tsType:{name:"string"},description:"The width of the icon container."},containerHeight:{required:!1,tsType:{name:"string"},description:"The height of the icon container."},title:{required:!1,tsType:{name:"string"},description:"Provides a human-readable title for the element that contains it.\nhttps://www.w3.org/TR/SVG-access/#Equivalent"},ContainerProps:{required:!1,tsType:{name:"DetailedHTMLProps",elements:[{name:"HTMLAttributes",elements:[{name:"HTMLDivElement"}],raw:"HTMLAttributes<HTMLDivElement>"},{name:"HTMLDivElement"}],raw:"DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>"},description:"Props applied to the container element."}}}},"./src/hooks/useBoolean/useBoolean.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{k:()=>useBoolean});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js");const toggleReducer=(state,nextValue)=>"boolean"==typeof nextValue?nextValue:!state,useBoolean=initialValue=>(0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(toggleReducer,initialValue)},"./src/hooks/useControlled/useControlled.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{u:()=>useControlled});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js");const useControlled=(defaultValue,controlled)=>{const{current:isControlled}=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0!==controlled),[valueState,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultValue),setUncontrolled=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value=>{isControlled||setValue(value)}),[]);return[isControlled?controlled:valueState,setUncontrolled]}},"./src/hooks/useIntersectionObserver/useIntersectionObserver.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{S:()=>useIntersectionObserver});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_useLatest__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/hooks/useLatest/useLatest.ts");const useIntersectionObserver=(element,callback,options)=>{const latestCallback=(0,_useLatest__WEBPACK_IMPORTED_MODULE_1__.d)(callback);(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{if(element.current){const intersectionObserver=new IntersectionObserver((entries=>{latestCallback.current(entries)}),options);return intersectionObserver.observe(element.current),()=>{intersectionObserver.disconnect()}}}),[element.current,options?.rootMargin])}},"./src/icons/IconCloseW350.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{l:()=>IconCloseW350});var _components_SvgIcon__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/SvgIcon/SvgIcon.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const IconCloseW350=props=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_SvgIcon__WEBPACK_IMPORTED_MODULE_1__.l,{size:"24px",viewBox:"0 0 24 24",...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path",{d:"M16.2941 9.11511C16.6835 8.72575 16.6835 8.09447 16.2941 7.70511C15.9048 7.31575 15.2735 7.31575 14.8841 7.70511L11.9991 10.5901L9.11413 7.70511C8.72477 7.31575 8.09349 7.31575 7.70413 7.70511C7.31477 8.09447 7.31477 8.72575 7.70413 9.11511L10.5891 12.0001L7.70413 14.8851C7.31477 15.2745 7.31477 15.9057 7.70413 16.2951C8.09349 16.6845 8.72477 16.6845 9.11413 16.2951L11.9991 13.4101L14.8841 16.2951C15.2735 16.6845 15.9048 16.6845 16.2941 16.2951C16.6835 15.9057 16.6835 15.2745 16.2941 14.8851L13.4091 12.0001L16.2941 9.11511Z",fill:"currentColor"})});IconCloseW350.__docgenInfo={description:"",methods:[],displayName:"IconCloseW350",props:{children:{required:!1,tsType:{name:"ReactNode"},description:""},classes:{required:!1,tsType:{name:"Partial",elements:[{name:"signature",type:"object",raw:"{\n  /** Styles applied to the root element. */\n  root: string;\n  /** Styles applied to the svg element. */\n  svg: string;\n}",signature:{properties:[{key:"root",value:{name:"string",required:!0},description:"Styles applied to the root element."},{key:"svg",value:{name:"string",required:!0},description:"Styles applied to the svg element."}]}}],raw:"Partial<SvgIconClasses>"},description:"Override or extend the styles applied to the component."},className:{required:!1,tsType:{name:"string"},description:"Class applied to the root element."},sx:{required:!1,tsType:{name:"SxProps",elements:[{name:"Theme"}],raw:"SxProps<Theme>"},description:"The system prop that allows defining system overrides as well as additional CSS styles."},size:{required:!1,tsType:{name:"string"},description:"The width and height of the icon."},width:{required:!1,tsType:{name:"string"},description:"The width of the icon."},height:{required:!1,tsType:{name:"string"},description:"The height of the icon."},container:{required:!1,tsType:{name:"boolean"},description:"If true, allows to set the container size, without resizing the svg element itself."},containerSize:{required:!1,tsType:{name:"string"},description:"The width and height of the icon container."},containerWidth:{required:!1,tsType:{name:"string"},description:"The width of the icon container."},containerHeight:{required:!1,tsType:{name:"string"},description:"The height of the icon container."},title:{required:!1,tsType:{name:"string"},description:"Provides a human-readable title for the element that contains it.\nhttps://www.w3.org/TR/SVG-access/#Equivalent"},ContainerProps:{required:!1,tsType:{name:"DetailedHTMLProps",elements:[{name:"HTMLAttributes",elements:[{name:"HTMLDivElement"}],raw:"HTMLAttributes<HTMLDivElement>"},{name:"HTMLDivElement"}],raw:"DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>"},description:"Props applied to the container element."}}}},"./src/icons/IconMagnify2W400.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{h:()=>IconMagnify2W400});var _components_SvgIcon__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/SvgIcon/SvgIcon.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const IconMagnify2W400=props=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_SvgIcon__WEBPACK_IMPORTED_MODULE_1__.l,{size:"24px",viewBox:"0 0 24 24",...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path",{clipRule:"evenodd",d:"M13.6175 15.0308C12.7315 15.6415 11.6575 15.999 10.5 15.999C7.46243 15.999 5 13.5366 5 10.499C5 7.46146 7.46243 4.99902 10.5 4.99902C13.5376 4.99902 16 7.46146 16 10.499C16 11.6565 15.6424 12.7305 15.0317 13.6165L18.2071 16.7919C18.5976 17.1824 18.5976 17.8156 18.2071 18.2061C17.8166 18.5967 17.1834 18.5967 16.7929 18.2061L13.6175 15.0308ZM14 10.499C14 12.432 12.433 13.999 10.5 13.999C8.567 13.999 7 12.432 7 10.499C7 8.56603 8.567 6.99902 10.5 6.99902C12.433 6.99902 14 8.56603 14 10.499Z",fill:"currentColor",fillRule:"evenodd"})});IconMagnify2W400.__docgenInfo={description:"",methods:[],displayName:"IconMagnify2W400",props:{children:{required:!1,tsType:{name:"ReactNode"},description:""},classes:{required:!1,tsType:{name:"Partial",elements:[{name:"signature",type:"object",raw:"{\n  /** Styles applied to the root element. */\n  root: string;\n  /** Styles applied to the svg element. */\n  svg: string;\n}",signature:{properties:[{key:"root",value:{name:"string",required:!0},description:"Styles applied to the root element."},{key:"svg",value:{name:"string",required:!0},description:"Styles applied to the svg element."}]}}],raw:"Partial<SvgIconClasses>"},description:"Override or extend the styles applied to the component."},className:{required:!1,tsType:{name:"string"},description:"Class applied to the root element."},sx:{required:!1,tsType:{name:"SxProps",elements:[{name:"Theme"}],raw:"SxProps<Theme>"},description:"The system prop that allows defining system overrides as well as additional CSS styles."},size:{required:!1,tsType:{name:"string"},description:"The width and height of the icon."},width:{required:!1,tsType:{name:"string"},description:"The width of the icon."},height:{required:!1,tsType:{name:"string"},description:"The height of the icon."},container:{required:!1,tsType:{name:"boolean"},description:"If true, allows to set the container size, without resizing the svg element itself."},containerSize:{required:!1,tsType:{name:"string"},description:"The width and height of the icon container."},containerWidth:{required:!1,tsType:{name:"string"},description:"The width of the icon container."},containerHeight:{required:!1,tsType:{name:"string"},description:"The height of the icon container."},title:{required:!1,tsType:{name:"string"},description:"Provides a human-readable title for the element that contains it.\nhttps://www.w3.org/TR/SVG-access/#Equivalent"},ContainerProps:{required:!1,tsType:{name:"DetailedHTMLProps",elements:[{name:"HTMLAttributes",elements:[{name:"HTMLDivElement"}],raw:"HTMLAttributes<HTMLDivElement>"},{name:"HTMLDivElement"}],raw:"DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>"},description:"Props applied to the container element."}}}},"./src/components/AutocompleteField/AutocompleteField.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Customization:()=>Customization,Demo:()=>Demo,Groups:()=>Groups,__namedExportsOrder:()=>__namedExportsOrder,default:()=>AutocompleteField_stories});var react=__webpack_require__("../../node_modules/react/index.js"),Box=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),clsx_m=__webpack_require__("../../node_modules/clsx/dist/clsx.m.js"),generateUtilityClass=__webpack_require__("./node_modules/@mui/base/generateUtilityClass/generateUtilityClass.js"),generateUtilityClasses=__webpack_require__("./node_modules/@mui/base/generateUtilityClasses/generateUtilityClasses.js");function getAutocompleteFieldUtilityClass(slot){return(0,generateUtilityClass.Z)("ESAutocompleteField",slot)}(0,generateUtilityClasses.Z)("ESAutocompleteField",["root"]);var composeClasses=__webpack_require__("./node_modules/@mui/base/composeClasses/composeClasses.js"),styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),useThemeProps=__webpack_require__("./node_modules/@mui/material/styles/useThemeProps.js"),FormControl=__webpack_require__("./node_modules/@mui/material/FormControl/FormControl.js"),FormHelperText=__webpack_require__("./node_modules/@mui/material/FormHelperText/FormHelperText.js"),InputLabel=__webpack_require__("./node_modules/@mui/material/InputLabel/InputLabel.js"),textFieldClasses=__webpack_require__("./node_modules/@mui/material/TextField/textFieldClasses.js"),useId=__webpack_require__("../../node_modules/@mui/utils/useId/useId.js"),useBoolean=__webpack_require__("./src/hooks/useBoolean/useBoolean.ts");function getAutocompleteUtilityClass(slot){return(0,generateUtilityClass.Z)("ESAutocomplete",slot)}const autocompleteClasses=(0,generateUtilityClasses.Z)("ESAutocomplete",["root","input","menu","displayValue","inputPlaceholder"]);var useFormControl=__webpack_require__("./node_modules/@mui/material/FormControl/useFormControl.js"),OutlinedInput=__webpack_require__("./node_modules/@mui/material/OutlinedInput/OutlinedInput.js"),useForkRef=__webpack_require__("./node_modules/@mui/material/utils/useForkRef.js"),useEnhancedEffect=__webpack_require__("../../node_modules/@mui/utils/useEnhancedEffect/useEnhancedEffect.js"),useControlled=__webpack_require__("./src/hooks/useControlled/useControlled.ts");function getAutocompleteMenuUtilityClass(slot){return(0,generateUtilityClass.Z)("ESAutocompleteMenu",slot)}(0,generateUtilityClasses.Z)("ESAutocompleteMenu",["root","paper","menuList","menuGroup","menuItem","menuItemText","sentinel","emptyState","search"]);var buttonClasses=__webpack_require__("./node_modules/@mui/material/Button/buttonClasses.js"),Button=__webpack_require__("./node_modules/@mui/material/Button/Button.js"),touchRippleClasses=__webpack_require__("./node_modules/@mui/material/ButtonBase/touchRippleClasses.js"),Checkbox=__webpack_require__("./node_modules/@mui/material/Checkbox/Checkbox.js"),ClickAwayListener=__webpack_require__("./node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js"),Grow=__webpack_require__("./node_modules/@mui/material/Grow/Grow.js"),inputAdornmentClasses=__webpack_require__("./node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js"),InputAdornment=__webpack_require__("./node_modules/@mui/material/InputAdornment/InputAdornment.js"),inputBaseClasses=__webpack_require__("./node_modules/@mui/material/InputBase/inputBaseClasses.js"),inputLabelClasses=__webpack_require__("./node_modules/@mui/material/InputLabel/inputLabelClasses.js"),MenuItem=__webpack_require__("./node_modules/@mui/material/MenuItem/MenuItem.js"),MenuList=__webpack_require__("./node_modules/@mui/material/MenuList/MenuList.js"),outlinedInputClasses=__webpack_require__("./node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js"),Popper=__webpack_require__("./node_modules/@mui/material/Popper/Popper.js"),TextField=__webpack_require__("./node_modules/@mui/material/TextField/TextField.js"),Unstable_TrapFocus=__webpack_require__("./node_modules/@mui/base/Unstable_TrapFocus/Unstable_TrapFocus.js"),useLatest=__webpack_require__("./src/hooks/useLatest/useLatest.ts"),ownerDocument=__webpack_require__("../../node_modules/@mui/utils/ownerDocument/ownerDocument.js"),ownerWindow=__webpack_require__("../../node_modules/@mui/utils/ownerWindow/ownerWindow.js"),getScrollbarSize=__webpack_require__("../../node_modules/@mui/utils/getScrollbarSize/getScrollbarSize.js");const getPaddingRight=element=>parseInt((0,ownerWindow.Z)(element).getComputedStyle(element).paddingRight,10)||0,useScrollLock=(lock,container)=>{(0,useEnhancedEffect.Z)((()=>{if(lock){const restoreStyle=[];if((element=>{const doc=(0,ownerDocument.Z)(element);return doc.body===element?(0,ownerWindow.Z)(element).innerWidth>doc.documentElement.clientWidth:element.scrollHeight>element.clientHeight})(container)){const scrollbarSize=(0,getScrollbarSize.Z)((0,ownerDocument.Z)(container));restoreStyle.push({value:container.style.paddingRight,property:"padding-right",el:container}),container.style.paddingRight=`${getPaddingRight(container)+scrollbarSize}px`;const fixedElements=(0,ownerDocument.Z)(container).querySelectorAll(".mui-fixed");[].forEach.call(fixedElements,(element=>{restoreStyle.push({value:element.style.paddingRight,property:"padding-right",el:element}),element.style.paddingRight=`${getPaddingRight(element)+scrollbarSize}px`}))}let scrollContainer;if(container.parentNode instanceof DocumentFragment)scrollContainer=(0,ownerDocument.Z)(container).body;else{const parent=container.parentElement,containerWindow=(0,ownerWindow.Z)(container);scrollContainer="HTML"===parent?.nodeName&&"scroll"===containerWindow.getComputedStyle(parent).overflowY?parent:container}restoreStyle.push({value:scrollContainer.style.overflow,property:"overflow",el:scrollContainer},{value:scrollContainer.style.overflowX,property:"overflow-x",el:scrollContainer},{value:scrollContainer.style.overflowY,property:"overflow-y",el:scrollContainer}),scrollContainer.style.overflow="hidden";return()=>{restoreStyle.forEach((({value,el,property})=>{value?el.style.setProperty(property,value):el.style.removeProperty(property)}))}}}),[lock])};var useIntersectionObserver=__webpack_require__("./src/hooks/useIntersectionObserver/useIntersectionObserver.ts"),IconMagnify2W400=__webpack_require__("./src/icons/IconMagnify2W400.tsx"),IconCloseW350=__webpack_require__("./src/icons/IconCloseW350.tsx"),SpinnerRing=__webpack_require__("./src/components/Spinner/SpinnerRing/SpinnerRing.tsx"),SvgIcon_classes=__webpack_require__("./src/components/SvgIcon/SvgIcon.classes.ts"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const AutocompleteMenuRoot=(0,styled.ZP)(Popper.Z,{name:"ESAutocompleteMenu",slot:"Root",overridesResolver:(_props,styles)=>styles.root})((()=>({zIndex:1300,"& *":{outline:"none"},"& > div":{transformOrigin:"50% 0 0"}}))),AutocompleteMenuPaper=(0,styled.ZP)("div",{name:"ESAutocompleteMenu",slot:"Paper",overridesResolver:(_props,styles)=>styles.paper})((({theme})=>({display:"flex",flexDirection:"column",backgroundColor:theme.palette.surface[400],boxShadow:theme.palette.shadow.down[600],borderRadius:"6px",userSelect:"none",overflow:"hidden",pointerEvents:"auto"}))),AutocompleteMenuMenuList=(0,styled.ZP)(MenuList.Z,{name:"ESAutocompleteMenuMenuList",slot:"MenuList",overridesResolver:(_props,styles)=>styles.menuList})((({theme})=>({...theme.scrollbars.overlayMonoA,maxHeight:"228px"}))),AutocompleteMenuMenuGroup=(0,styled.ZP)("div",{name:"ESAutocompleteMenu",slot:"MenuGroup",overridesResolver:(_props,styles)=>styles.group})((({theme})=>({...theme.typography.caption,color:theme.palette.monoA.A600,padding:"8px 16px 4px","&:not(:first-child)":{borderTop:`1px solid ${theme.palette.monoA.A100}`,paddingTop:"16px",marginTop:"8px"}}))),AutocompleteMenuMenuItem=(0,styled.ZP)(MenuItem.Z,{name:"ESAutocompleteMenu",slot:"MenuItem",overridesResolver:(_props,styles)=>styles.menuItem})((()=>({padding:"2px 16px"}))),AutocompleteMenuMenuItemText=(0,styled.ZP)("div",{name:"ESAutocompleteMenu",slot:"MenuItemText",overridesResolver:(_props,styles)=>styles.menuItemText})((()=>({overflow:"hidden",textOverflow:"ellipsis"}))),AutocompleteMenuSentinel=(0,styled.ZP)(MenuItem.Z,{name:"ESAutocompleteMenu",slot:"Sentinel",overridesResolver:(_props,styles)=>styles.sentinel})((()=>({padding:0,minHeight:0}))),AutocompleteMenuCheckbox=(0,styled.ZP)(Checkbox.Z,{name:"ESAutocompleteMenu",slot:"Checkbox",overridesResolver:(_props,styles)=>styles.checkbox})((()=>({marginLeft:"-9px",marginRight:"3px"}))),AutocompleteMenuEmptyState=(0,styled.ZP)("div",{name:"ESAutocompleteMenu",slot:"EmptyState",overridesResolver:(_props,styles)=>styles.emptyState})((({theme})=>({...theme.typography.caption,display:"flex",alignItems:"center",justifyContent:"center",gap:"8px",padding:"12px 16px",color:theme.palette.monoA.A600}))),AutocompleteMenuSearch=(0,styled.ZP)(TextField.Z,{name:"ESAutocompleteMenu",slot:"Search",overridesResolver:(_props,styles)=>styles.search})((({theme})=>({borderBottom:`1px solid ${theme.palette.monoA.A100}`,[`& .${outlinedInputClasses.Z.root}.${inputBaseClasses.Z.adornedEnd}`]:{paddingRight:"8px"},[`& .${inputLabelClasses.Z.root}`]:{opacity:0},[`& .${inputAdornmentClasses.Z.positionStart}`]:{color:theme.palette.monoA.A500},[`&:hover .${inputAdornmentClasses.Z.positionStart} .${SvgIcon_classes.H.root}`]:{color:theme.palette.monoA.A600},[`& .${inputAdornmentClasses.Z.positionEnd}`]:{marginLeft:"6px",[`& .${buttonClasses.Z.root}`]:{height:"40px",padding:"0 7px",flexShrink:0,"&:hover ":{[`& .${SvgIcon_classes.H.root}`]:{color:theme.palette.monoA.A500},[`& .${touchRippleClasses.Z.root}`]:{backgroundColor:"inherit"}},[`& .${SvgIcon_classes.H.root}`]:{color:theme.palette.monoA.A400},"&.Mui-focusVisible":{backgroundColor:theme.palette.monoA.A200},[`&:active .${SvgIcon_classes.H.root}`]:{color:theme.palette.monoA.A600}}},[`& .${outlinedInputClasses.Z.notchedOutline}`]:{border:"none",[`&.${inputBaseClasses.Z.adornedEnd}`]:{paddingRight:"4px"}},[`& .${outlinedInputClasses.Z.input}`]:{...theme.typography.body100}}))),AutocompleteMenu=(0,react.forwardRef)((function AutocompleteMenu(inProps,ref){const{paperRef,className,classes:inClasses,sx,width,offset=[0,4],container=document.body,anchorEl,open,options,getOptionValue,getOptionLabel,getOptionDisabled,groupBy,loading,header,footer,disableAutoFocus,disableEnforceFocus,disableEscapeKeyDown,disableRestoreFocus,disableScrollLock,labelNoOptions,labelNoMatches,labelLoading,labelSearch,labelSearchClear,PopperProps,SearchProps,transitionDuration,TransitionProps:inTransitionProps,onClose,onLoadMore,iconSearch=(0,jsx_runtime.jsx)(IconMagnify2W400.h,{}),iconSearchClear=(0,jsx_runtime.jsx)(IconCloseW350.l,{}),...props}=(0,useThemeProps.Z)({props:inProps,name:"ESAutocompleteMenu"}),searchInputRef=(0,react.useRef)(null),[sentinelRef,setSentinelRef]=(0,react.useState)(null),onCloseLatest=(0,useLatest.d)(onClose);useScrollLock(!disableScrollLock&&open,container);const valueArray=(0,react.useMemo)((()=>props.multiple?props.value:props.value?[props.value]:[]),[props.multiple,props.value]),valueMap=(0,react.useMemo)((()=>valueArray.reduce(((acc,v)=>(acc[getOptionValue(v)]=!0,acc)),{})),[valueArray]);(0,useIntersectionObserver.S)({current:sentinelRef},(entries=>{onLoadMore&&entries[0].isIntersecting&&onLoadMore()})),(0,react.useEffect)((()=>{const onKeyDown=e=>{"Escape"===e.key&&onCloseLatest.current&&onCloseLatest.current(e,"escapeKeyDown")};return open&&onClose&&!disableEscapeKeyDown&&document.addEventListener("keydown",onKeyDown),()=>document.removeEventListener("keydown",onKeyDown)}),[open,disableEscapeKeyDown]);const onMenuItemClick=(0,react.useCallback)((option=>()=>{if(props.onChange)if(props.multiple){const index=props.value.findIndex((v=>getOptionValue(v)===getOptionValue(option)));-1===index?props.onChange(props.value.concat(option)):(props.value.splice(index,1),props.onChange(props.value.slice()))}else props.onChange(option)}),[props.multiple,props.value,props.onChange]),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["root"],paper:["paper"],menuList:["menuList"],menuGroup:["menuGroup"],menuItem:["menuItem"],menuItemText:["menuItemText"],sentinel:["sentinel"],emptyState:["emptyState"],search:["search"]},getAutocompleteMenuUtilityClass,classes)})({classes:inClasses}),groupedOptions=[];for(let index=0;index<options.length;index++){const option=options[index],value=getOptionValue(option),label=getOptionLabel(option),selected=!!valueMap[value],disabled=getOptionDisabled?getOptionDisabled(option):void 0,group=groupBy?.(option);!groupBy||0!==index&&group===groupBy(options[index-1])||groupedOptions.push((0,jsx_runtime.jsx)(AutocompleteMenuMenuGroup,{"aria-disabled":!0,className:classes.menuGroup,tabIndex:-1,children:group},`${value}-${group}`)),groupedOptions.push((0,jsx_runtime.jsxs)(AutocompleteMenuMenuItem,{autoFocus:0===index&&!SearchProps&&!disableAutoFocus,className:classes.menuItem,disabled,selected,tabIndex:0===index?0:-1,onClick:onMenuItemClick(option),children:[!!props.multiple&&(0,jsx_runtime.jsx)(AutocompleteMenuCheckbox,{readOnly:!0,checked:selected,color:"secondary",tabIndex:-1}),(0,jsx_runtime.jsx)(AutocompleteMenuMenuItemText,{className:classes.menuItemText,children:label})]},value))}return(0,jsx_runtime.jsx)(AutocompleteMenuRoot,{ref,transition:!0,anchorEl,className:(0,clsx_m.Z)(className,classes.root),open,placement:"bottom",sx,...PopperProps,modifiers:[{name:"offset",options:{offset}},...disableScrollLock?[]:[{name:"preventOverflow",options:{altAxis:!0,padding:{top:8,bottom:8}}}],...PopperProps?.modifiers||[]],children:({TransitionProps})=>(0,jsx_runtime.jsx)(Grow.Z,{in:TransitionProps?.in,timeout:transitionDuration,...inTransitionProps,onEnter:(...args)=>{TransitionProps?.onEnter?.(),inTransitionProps?.onEnter?.(...args)},onExited:(...args)=>{TransitionProps?.onExited?.(),inTransitionProps?.onExited?.(...args)},children:(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(Unstable_TrapFocus.Z,{disableAutoFocus,disableEnforceFocus,disableRestoreFocus,isEnabled:()=>!0,open,children:(0,jsx_runtime.jsx)("div",{tabIndex:-1,children:(0,jsx_runtime.jsx)(ClickAwayListener.Z,{mouseEvent:"onMouseDown",onClickAway:e=>{onClose?.(e,"clickAway")},children:(0,jsx_runtime.jsxs)(AutocompleteMenuPaper,{ref:paperRef,className:classes.paper,style:{width,maxHeight:disableScrollLock?void 0:"calc(100dvh - 16px)"},children:[!!SearchProps&&(0,jsx_runtime.jsx)(AutocompleteMenuSearch,{fullWidth:!0,autoFocus:!disableAutoFocus,className:classes.search,inputRef:searchInputRef,placeholder:labelSearch,size:"40",...SearchProps,InputProps:{startAdornment:(0,jsx_runtime.jsx)(InputAdornment.Z,{position:"start",children:iconSearch}),endAdornment:!!SearchProps.value&&(0,jsx_runtime.jsx)(InputAdornment.Z,{position:"end",children:(0,jsx_runtime.jsx)(Button.Z,{disableFocusRipple:!0,disableRipple:!0,"aria-label":labelSearchClear,color:"monoA",size:"24",onClick:()=>{SearchProps.onChange&&(SearchProps.onChange({target:{value:""}}),searchInputRef.current&&searchInputRef.current.focus())},children:iconSearchClear})}),...SearchProps.InputProps}}),header,loading?(0,jsx_runtime.jsxs)(AutocompleteMenuEmptyState,{className:classes.emptyState,children:[(0,jsx_runtime.jsx)(SpinnerRing.Z,{color:"monoA",size:16})," ",labelLoading]}):options.length?(0,jsx_runtime.jsxs)(AutocompleteMenuMenuList,{className:classes.menuList,children:[groupedOptions,!!onLoadMore&&(0,jsx_runtime.jsx)(AutocompleteMenuSentinel,{ref:setSentinelRef,disabled:!0,className:classes.sentinel,tabIndex:-1})]}):(0,jsx_runtime.jsx)(AutocompleteMenuEmptyState,{className:classes.emptyState,children:SearchProps?.value?labelNoMatches:labelNoOptions}),footer]})})})})})})})}));AutocompleteMenu.__docgenInfo={description:"",methods:[],displayName:"AutocompleteMenu"};const AutocompleteRoot=(0,styled.ZP)(OutlinedInput.Z,{name:"ESAutocomplete",slot:"Root",overridesResolver:(_props,styles)=>styles.root})((()=>({cursor:"pointer",[`& .${autocompleteClasses.input}`]:{width:"100%",outline:"none",whiteSpace:"nowrap",overflow:"hidden",display:"inline-flex",alignItems:"center"}}))),Autocomplete_AutocompleteMenu=(0,styled.ZP)(AutocompleteMenu,{name:"ESAutocomplete",slot:"Menu",overridesResolver:(_props,styles)=>styles.menu})((({ownerState})=>({pointerEvents:ownerState.inlineSearch?"none":"auto"}))),AutocompleteInputDisplayValue=(0,styled.ZP)("div",{name:"ESAutocomplete",slot:"DisplayValue",overridesResolver:(_props,styles)=>styles.displayValue})((()=>({minWidth:0,overflow:"hidden",textOverflow:"ellipsis"}))),AutocompleteInputPlaceholder=(0,styled.ZP)("div",{name:"ESAutocomplete",slot:"InputPlaceholder",overridesResolver:(_props,styles)=>styles.inputPlaceholder})((({theme})=>({color:theme.palette.monoA.A400,minWidth:0,overflow:"hidden",textOverflow:"ellipsis"}))),Autocomplete=inProps=>{const{className,classes:inClasses,sx,id,inputRef:inInputRef,label,name,placeholder,"aria-describedby":ariaDescribedby,startAdornment,endAdornment,options,getOptionValue,getOptionLabel,getOptionDisabled,groupBy,loading,inlineSearch,header,footer,MenuProps,SearchProps,open:inOpen,onOpen,onClose,onLoadMore,onBlur,...props}=(0,useThemeProps.Z)({props:inProps,name:"ESAutocomplete"}),formControl=(0,useFormControl.Z)();if(!formControl)throw new Error("No provider for FormControlContext.");const ref=(0,react.useRef)(null),paperRef=(0,react.useRef)(null),inputRef=(0,react.useRef)(null),inputNodeRef=(0,useForkRef.Z)(inputRef,inInputRef),isInputFocusRequested=(0,react.useRef)(!1),[open,setOpen]=(0,useControlled.u)(!1,inOpen),[menuWidthState,setMenuWidthState]=(0,react.useState)(0),previousFocused=(value=>{const previous=(0,react.useRef)(value);return(0,react.useEffect)((()=>(previous.current=value,()=>{previous.current=void 0}))),previous.current})(formControl.focused),valueArray=(0,react.useMemo)((()=>props.multiple?props.value:props.value?[props.value]:[]),[props.multiple,props.value]),valueDisplay=(0,react.useMemo)((()=>props.getDisplayValue?(props.multiple,props.getDisplayValue(props.value)):valueArray.map((v=>getOptionLabel(v))).join(", ")),[props.value,valueArray]);(0,useEnhancedEffect.Z)((()=>{valueArray.length?formControl.onFilled():formControl.onEmpty()}),[valueArray,formControl.onEmpty,formControl.onFilled,formControl.filled]),(0,react.useEffect)((()=>{onBlur&&!formControl.focused&&previousFocused&&(isInputFocusRequested.current?isInputFocusRequested.current=!1:onBlur({target:{name}}))}),[formControl.focused,previousFocused]),(0,useEnhancedEffect.Z)((()=>{formControl.setAdornedStart(!!startAdornment)}),[!!startAdornment]);const onMenuOpen=(0,react.useCallback)((disableAutoFocus=>{ref.current&&(setMenuWidthState(ref.current.clientWidth),setOpen(!0),onOpen?.(),disableAutoFocus||setTimeout((()=>{if(paperRef.current){const element=paperRef.current.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');element&&element.focus()}}),0))}),[]),onMenuClose=(0,react.useCallback)(((event,reason)=>{"escapeKeyDown"===reason&&(isInputFocusRequested.current=!0,requestAnimationFrame((()=>{inputRef.current&&inputRef.current.focus()}))),inlineSearch&&"clickAway"===reason&&ref.current?.contains(event.target)||(setOpen(!1),onClose?.())}),[inlineSearch]),notched=formControl.filled||formControl.focused||!!startAdornment||!!open,ownerState={classes:inClasses,inlineSearch},classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["root"],input:["input"],menu:["menu"],displayValue:["displayValue"],inputPlaceholder:["inputPlaceholder"]},getAutocompleteUtilityClass,classes)})(ownerState);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(AutocompleteRoot,{ref,autoComplete:inlineSearch?"off":void 0,autoFocus:!!inlineSearch&&formControl.focused,className:(0,clsx_m.Z)(className,classes.root),disabled:formControl.disabled,endAdornment,error:formControl.error,fullWidth:props.fullWidth,id,inputComponent:inlineSearch&&formControl.focused?"input":"div",inputProps:{children:inlineSearch&&formControl.focused?null:valueDisplay?(0,jsx_runtime.jsx)(AutocompleteInputDisplayValue,{className:classes.displayValue,children:valueDisplay}):(notched||!label)&&(0,jsx_runtime.jsx)(AutocompleteInputPlaceholder,{className:classes.inputPlaceholder,children:placeholder}),className:classes.input,role:inlineSearch?"input":"button",tabIndex:formControl.disabled?-1:0,onBlur:()=>{formControl.onBlur()},onFocus:formControl.onFocus,onKeyDown:event=>{-1!==(inlineSearch?["ArrowUp","ArrowDown","Enter"]:[" ","ArrowUp","ArrowDown","Enter"]).indexOf(event.key)&&(event.preventDefault(),onMenuOpen()),-1!==["Escape","Tab"].indexOf(event.key)&&(setOpen(!1),onClose?.())},"aria-describedby":ariaDescribedby,...props.inputProps},inputRef:inputNodeRef,label,name,notched,placeholder:inlineSearch?placeholder:void 0,required:formControl.required,startAdornment,sx,value:inlineSearch&&formControl.focused?SearchProps?.value:null,onChange:inlineSearch&&formControl.focused?e=>{SearchProps?.onChange?.(e),onMenuOpen(!0)}:void 0,onMouseDown:event=>{formControl.disabled||0!==event.button||(setTimeout((()=>{inputRef.current&&inputRef.current.focus()})),onMenuOpen(!!inlineSearch))},children:inlineSearch?null:valueDisplay}),(0,jsx_runtime.jsx)(Autocomplete_AutocompleteMenu,{value:props.value,multiple:props.multiple,disableRestoreFocus:!0,SearchProps:inlineSearch?void 0:SearchProps,anchorEl:ref.current,className:classes.menu,disableAutoFocus:!!inlineSearch,disableScrollLock:!!inlineSearch,footer,getOptionDisabled,getOptionLabel,getOptionValue,groupBy,header,loading,open:!!open,options,paperRef,width:menuWidthState,onChange:value=>{props.onChange&&props.onChange(value)},onClose:onMenuClose,onLoadMore,...MenuProps,ownerState})]})};Autocomplete.__docgenInfo={description:"The autocomplete is used to choose an item from a collection of options.",methods:[],displayName:"Autocomplete",props:{classes:{required:!1,tsType:{name:"Partial",elements:[{name:"signature",type:"object",raw:"{\n  /** Styles applied to the root element. */\n  root: string;\n  /** Styles applied to the input element. */\n  input: string;\n  /** Styles applied to the menu element. */\n  menu: string;\n  /** Styles applied to the display value element. */\n  displayValue: string;\n  /** Styles applied to the input placeholder element. */\n  inputPlaceholder: string;\n}",signature:{properties:[{key:"root",value:{name:"string",required:!0},description:"Styles applied to the root element."},{key:"input",value:{name:"string",required:!0},description:"Styles applied to the input element."},{key:"menu",value:{name:"string",required:!0},description:"Styles applied to the menu element."},{key:"displayValue",value:{name:"string",required:!0},description:"Styles applied to the display value element."},{key:"inputPlaceholder",value:{name:"string",required:!0},description:"Styles applied to the input placeholder element."}]}}],raw:"Partial<AutocompleteClasses>"},description:"Override or extend the styles applied to the component."},className:{required:!1,tsType:{name:"string"},description:"Class applied to the root element."},sx:{required:!1,tsType:{name:"SxProps",elements:[{name:"Theme"}],raw:"SxProps<Theme>"},description:"The system prop that allows defining system overrides as well as additional CSS styles."},inlineSearch:{required:!1,tsType:{name:"boolean"},description:"If true, it is possible to enter a search string in the input itself."},open:{required:!1,tsType:{name:"boolean"},description:"If true, the popper is opened."},onOpen:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Callback fired when the menu requests to be opened."},onClose:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Callback fired when the menu requests to be closed."},onBlur:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: { target: { name?: string } }) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:"{ target: { name?: string } }",signature:{properties:[{key:"target",value:{name:"signature",type:"object",raw:"{ name?: string }",signature:{properties:[{key:"name",value:{name:"string",required:!1}}]},required:!0}}]}},name:"event"}],return:{name:"void"}}},description:"Callback fired when the input loses focus."},MenuProps:{required:!1,tsType:{name:"Partial",elements:[{name:"Omit",elements:[{name:"intersection",raw:"{\n  paperRef?: ForwardedRef<HTMLDivElement>;\n\n  /** Override or extend the styles applied to the component. */\n  classes?: Partial<AutocompleteMenuClasses>;\n  /** Class applied to the root element. */\n  className?: string;\n  /** The system prop that allows defining system overrides as well as additional CSS styles. */\n  sx?: SxProps<Theme>;\n\n  /**\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container?: HTMLElement;\n\n  /**\n   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\n   * or a function that returns either.\n   * It's used to set the position of the popper.\n   * The return value will passed as the reference object of the Popper instance.\n   */\n  anchorEl: PopperProps['anchorEl'];\n\n  /** If `true`, the component is shown. */\n  open: boolean;\n\n  /** The width of the menu. */\n  width?: number | string;\n  /** The offset from anchor element. */\n  offset?: [number, number];\n\n  /** Array of the options. */\n  options: T[];\n  /** Used to determine the value for a given option. It's used for options comparison. */\n  getOptionValue: (option: T) => number | string;\n  /** Used to determine the display value for a given option. It's used to fill the input and the list box options. */\n  getOptionLabel: (option: T) => ReactNode;\n  /** Used to determine the disabled state for a given option. */\n  getOptionDisabled?: (option: T) => boolean;\n\n  /** If provided, the options will be grouped under the returned value. */\n  groupBy?: (option: T) => number | string;\n\n  /** If true, the component is in a loading state. This shows the labelLoading in place of options (only if options are empty). */\n  loading?: boolean;\n  /** Children content for the menu header. */\n  header?: ReactNode;\n  /** Children content for the menu footer. */\n  footer?: ReactNode;\n\n  /** Callback fired when the menu requests to be closed. */\n  onClose?: (event: unknown, reason: 'escapeKeyDown' | 'clickAway') => void;\n  /** Callback fired when the menu list is scrolled to the end. */\n  onLoadMore?: () => void;\n\n  /** Props applied to the popper component. */\n  PopperProps?: Omit<Partial<PopperProps>, 'anchorEl' | 'open'>;\n  /** Props applied to the search field component. If present, shows the component. */\n  SearchProps?: Partial<TextFieldProps>;\n\n  /**\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default 'auto'\n   */\n  transitionDuration?: TransitionProps['timeout'] | 'auto';\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps?: TransitionProps;\n\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus?: boolean;\n\n  /** If `true`, the modal will not prevent focus from leaving the modal while open. */\n  disableEnforceFocus?: boolean;\n  /** If `true`, hitting escape will not fire the `onClose` callback. */\n  disableEscapeKeyDown?: boolean;\n  /** If `true`, the modal will not restore focus to previously focused element once modal is hidden or unmounted. */\n  disableRestoreFocus?: boolean;\n  /** Disable the scroll lock behavior. */\n  disableScrollLock?: boolean;\n\n  /** Text for the empty state. */\n  labelNoOptions?: ReactNode;\n  /** Text for the empty state when search value is not empty. */\n  labelNoMatches?: ReactNode;\n  /** Text for the loading state. */\n  labelLoading?: ReactNode;\n  /** Text for the search field placeholder. */\n  labelSearch?: string;\n  /** Text for the search field clear button aria-label. */\n  labelSearchClear?: string;\n\n  /** Icon for the search field startAdornment. */\n  iconSearch?: ReactNode;\n  /** Icon for the search field clear button. */\n  iconSearchClear?: ReactNode;\n} & (\n  | {\n      multiple?: false;\n      value: T | null;\n      onChange?: (value: T | null) => void;\n    }\n  | {\n      multiple: true;\n      value: T[];\n      onChange?: (value: T[]) => void;\n    }\n)",elements:[{name:"signature",type:"object",raw:"{\n  paperRef?: ForwardedRef<HTMLDivElement>;\n\n  /** Override or extend the styles applied to the component. */\n  classes?: Partial<AutocompleteMenuClasses>;\n  /** Class applied to the root element. */\n  className?: string;\n  /** The system prop that allows defining system overrides as well as additional CSS styles. */\n  sx?: SxProps<Theme>;\n\n  /**\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container?: HTMLElement;\n\n  /**\n   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\n   * or a function that returns either.\n   * It's used to set the position of the popper.\n   * The return value will passed as the reference object of the Popper instance.\n   */\n  anchorEl: PopperProps['anchorEl'];\n\n  /** If `true`, the component is shown. */\n  open: boolean;\n\n  /** The width of the menu. */\n  width?: number | string;\n  /** The offset from anchor element. */\n  offset?: [number, number];\n\n  /** Array of the options. */\n  options: T[];\n  /** Used to determine the value for a given option. It's used for options comparison. */\n  getOptionValue: (option: T) => number | string;\n  /** Used to determine the display value for a given option. It's used to fill the input and the list box options. */\n  getOptionLabel: (option: T) => ReactNode;\n  /** Used to determine the disabled state for a given option. */\n  getOptionDisabled?: (option: T) => boolean;\n\n  /** If provided, the options will be grouped under the returned value. */\n  groupBy?: (option: T) => number | string;\n\n  /** If true, the component is in a loading state. This shows the labelLoading in place of options (only if options are empty). */\n  loading?: boolean;\n  /** Children content for the menu header. */\n  header?: ReactNode;\n  /** Children content for the menu footer. */\n  footer?: ReactNode;\n\n  /** Callback fired when the menu requests to be closed. */\n  onClose?: (event: unknown, reason: 'escapeKeyDown' | 'clickAway') => void;\n  /** Callback fired when the menu list is scrolled to the end. */\n  onLoadMore?: () => void;\n\n  /** Props applied to the popper component. */\n  PopperProps?: Omit<Partial<PopperProps>, 'anchorEl' | 'open'>;\n  /** Props applied to the search field component. If present, shows the component. */\n  SearchProps?: Partial<TextFieldProps>;\n\n  /**\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default 'auto'\n   */\n  transitionDuration?: TransitionProps['timeout'] | 'auto';\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps?: TransitionProps;\n\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus?: boolean;\n\n  /** If `true`, the modal will not prevent focus from leaving the modal while open. */\n  disableEnforceFocus?: boolean;\n  /** If `true`, hitting escape will not fire the `onClose` callback. */\n  disableEscapeKeyDown?: boolean;\n  /** If `true`, the modal will not restore focus to previously focused element once modal is hidden or unmounted. */\n  disableRestoreFocus?: boolean;\n  /** Disable the scroll lock behavior. */\n  disableScrollLock?: boolean;\n\n  /** Text for the empty state. */\n  labelNoOptions?: ReactNode;\n  /** Text for the empty state when search value is not empty. */\n  labelNoMatches?: ReactNode;\n  /** Text for the loading state. */\n  labelLoading?: ReactNode;\n  /** Text for the search field placeholder. */\n  labelSearch?: string;\n  /** Text for the search field clear button aria-label. */\n  labelSearchClear?: string;\n\n  /** Icon for the search field startAdornment. */\n  iconSearch?: ReactNode;\n  /** Icon for the search field clear button. */\n  iconSearchClear?: ReactNode;\n}",signature:{properties:[{key:"paperRef",value:{name:"ForwardedRef",elements:[{name:"HTMLDivElement"}],raw:"ForwardedRef<HTMLDivElement>",required:!1}},{key:"classes",value:{name:"Partial",elements:[{name:"signature",type:"object",raw:"{\n  /** Styles applied to the root element. */\n  root: string;\n  /** Styles applied to the paper element. */\n  paper: string;\n  /** Styles applied to the menu list element. */\n  menuList: string;\n  /** Styles applied to the menu group element. */\n  menuGroup: string;\n  /** Styles applied to the menu item element. */\n  menuItem: string;\n  /** Styles applied to the menu item text element. */\n  menuItemText: string;\n  /** Styles applied to the sentinel element. */\n  sentinel: string;\n  /** Styles applied to the empty state element. */\n  emptyState: string;\n  /** Styles applied to the search field element. */\n  search: string;\n}",signature:{properties:[{key:"root",value:{name:"string",required:!0},description:"Styles applied to the root element."},{key:"paper",value:{name:"string",required:!0},description:"Styles applied to the paper element."},{key:"menuList",value:{name:"string",required:!0},description:"Styles applied to the menu list element."},{key:"menuGroup",value:{name:"string",required:!0},description:"Styles applied to the menu group element."},{key:"menuItem",value:{name:"string",required:!0},description:"Styles applied to the menu item element."},{key:"menuItemText",value:{name:"string",required:!0},description:"Styles applied to the menu item text element."},{key:"sentinel",value:{name:"string",required:!0},description:"Styles applied to the sentinel element."},{key:"emptyState",value:{name:"string",required:!0},description:"Styles applied to the empty state element."},{key:"search",value:{name:"string",required:!0},description:"Styles applied to the search field element."}]}}],raw:"Partial<AutocompleteMenuClasses>",required:!1},description:"Override or extend the styles applied to the component."},{key:"className",value:{name:"string",required:!1},description:"Class applied to the root element."},{key:"sx",value:{name:"SxProps",elements:[{name:"Theme"}],raw:"SxProps<Theme>",required:!1},description:"The system prop that allows defining system overrides as well as additional CSS styles."},{key:"container",value:{name:"HTMLElement",required:!1},description:"The `container` will have the portal children appended to it.\n\nBy default, it uses the body of the top-level document object,\nso it's simply `document.body` most of the time."},{key:"anchorEl",value:{name:"PopperProps['anchorEl']",raw:"PopperProps['anchorEl']",required:!0},description:"An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\nor a function that returns either.\nIt's used to set the position of the popper.\nThe return value will passed as the reference object of the Popper instance."},{key:"open",value:{name:"boolean",required:!0},description:"If `true`, the component is shown."},{key:"width",value:{name:"union",raw:"number | string",elements:[{name:"number"},{name:"string"}],required:!1},description:"The width of the menu."},{key:"offset",value:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}],required:!1},description:"The offset from anchor element."},{key:"options",value:{name:"Array",elements:[{name:"T"}],raw:"T[]",required:!0},description:"Array of the options."},{key:"getOptionValue",value:{name:"signature",type:"function",raw:"(option: T) => number | string",signature:{arguments:[{type:{name:"T"},name:"option"}],return:{name:"union",raw:"number | string",elements:[{name:"number"},{name:"string"}]}},required:!0},description:"Used to determine the value for a given option. It's used for options comparison."},{key:"getOptionLabel",value:{name:"signature",type:"function",raw:"(option: T) => ReactNode",signature:{arguments:[{type:{name:"T"},name:"option"}],return:{name:"ReactNode"}},required:!0},description:"Used to determine the display value for a given option. It's used to fill the input and the list box options."},{key:"getOptionDisabled",value:{name:"signature",type:"function",raw:"(option: T) => boolean",signature:{arguments:[{type:{name:"T"},name:"option"}],return:{name:"boolean"}},required:!1},description:"Used to determine the disabled state for a given option."},{key:"groupBy",value:{name:"signature",type:"function",raw:"(option: T) => number | string",signature:{arguments:[{type:{name:"T"},name:"option"}],return:{name:"union",raw:"number | string",elements:[{name:"number"},{name:"string"}]}},required:!1},description:"If provided, the options will be grouped under the returned value."},{key:"loading",value:{name:"boolean",required:!1},description:"If true, the component is in a loading state. This shows the labelLoading in place of options (only if options are empty)."},{key:"header",value:{name:"ReactNode",required:!1},description:"Children content for the menu header."},{key:"footer",value:{name:"ReactNode",required:!1},description:"Children content for the menu footer."},{key:"onClose",value:{name:"signature",type:"function",raw:"(event: unknown, reason: 'escapeKeyDown' | 'clickAway') => void",signature:{arguments:[{type:{name:"unknown"},name:"event"},{type:{name:"union",raw:"'escapeKeyDown' | 'clickAway'",elements:[{name:"literal",value:"'escapeKeyDown'"},{name:"literal",value:"'clickAway'"}]},name:"reason"}],return:{name:"void"}},required:!1},description:"Callback fired when the menu requests to be closed."},{key:"onLoadMore",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!1},description:"Callback fired when the menu list is scrolled to the end."},{key:"PopperProps",value:{name:"Omit",elements:[{name:"Partial",elements:[{name:"PopperProps"}],raw:"Partial<PopperProps>"},{name:"union",raw:"'anchorEl' | 'open'",elements:[{name:"literal",value:"'anchorEl'"},{name:"literal",value:"'open'"}]}],raw:"Omit<Partial<PopperProps>, 'anchorEl' | 'open'>",required:!1},description:"Props applied to the popper component."},{key:"SearchProps",value:{name:"Partial",elements:[{name:"TextFieldProps"}],raw:"Partial<TextFieldProps>",required:!1},description:"Props applied to the search field component. If present, shows the component."},{key:"transitionDuration",value:{name:"union",raw:"TransitionProps['timeout'] | 'auto'",elements:[{name:"TransitionProps['timeout']",raw:"TransitionProps['timeout']"},{name:"literal",value:"'auto'"}],required:!1},description:"Set to 'auto' to automatically calculate transition time based on height.\n@default 'auto'"},{key:"TransitionProps",value:{name:"TransitionProps",required:!1},description:"Props applied to the transition element.\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n@default {}"},{key:"disableAutoFocus",value:{name:"boolean",required:!1},description:"If `true`, the modal will not automatically shift focus to itself when it opens, and\nreplace it to the last focused element when it closes.\nThis also works correctly with any modal children that have the `disableAutoFocus` prop.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers."},{key:"disableEnforceFocus",value:{name:"boolean",required:!1},description:"If `true`, the modal will not prevent focus from leaving the modal while open."},{key:"disableEscapeKeyDown",value:{name:"boolean",required:!1},description:"If `true`, hitting escape will not fire the `onClose` callback."},{key:"disableRestoreFocus",value:{name:"boolean",required:!1},description:"If `true`, the modal will not restore focus to previously focused element once modal is hidden or unmounted."},{key:"disableScrollLock",value:{name:"boolean",required:!1},description:"Disable the scroll lock behavior."},{key:"labelNoOptions",value:{name:"ReactNode",required:!1},description:"Text for the empty state."},{key:"labelNoMatches",value:{name:"ReactNode",required:!1},description:"Text for the empty state when search value is not empty."},{key:"labelLoading",value:{name:"ReactNode",required:!1},description:"Text for the loading state."},{key:"labelSearch",value:{name:"string",required:!1},description:"Text for the search field placeholder."},{key:"labelSearchClear",value:{name:"string",required:!1},description:"Text for the search field clear button aria-label."},{key:"iconSearch",value:{name:"ReactNode",required:!1},description:"Icon for the search field startAdornment."},{key:"iconSearchClear",value:{name:"ReactNode",required:!1},description:"Icon for the search field clear button."}]}},{name:"unknown"}]},{name:"union",raw:"| 'value'\n| 'onChange'\n| 'multiple'\n| 'getDisplayValue'\n| 'options'\n| 'getOptionLabel'\n| 'getOptionValue'\n| 'getOptionDisabled'\n| 'groupBy'",elements:[{name:"literal",value:"'value'"},{name:"literal",value:"'onChange'"},{name:"literal",value:"'multiple'"},{name:"literal",value:"'getDisplayValue'"},{name:"literal",value:"'options'"},{name:"literal",value:"'getOptionLabel'"},{name:"literal",value:"'getOptionValue'"},{name:"literal",value:"'getOptionDisabled'"},{name:"literal",value:"'groupBy'"}]}],raw:"Omit<\n  AutocompleteMenuProps<T>,\n  | 'value'\n  | 'onChange'\n  | 'multiple'\n  | 'getDisplayValue'\n  | 'options'\n  | 'getOptionLabel'\n  | 'getOptionValue'\n  | 'getOptionDisabled'\n  | 'groupBy'\n>"}],raw:"Partial<\n  Omit<\n    AutocompleteMenuProps<T>,\n    | 'value'\n    | 'onChange'\n    | 'multiple'\n    | 'getDisplayValue'\n    | 'options'\n    | 'getOptionLabel'\n    | 'getOptionValue'\n    | 'getOptionDisabled'\n    | 'groupBy'\n  >\n>"},description:"Props applied to the menu component."},SearchProps:{required:!1,tsType:{name:"Partial",elements:[{name:"TextFieldProps"}],raw:"Partial<TextFieldProps>"},description:"Props applied to the search field component. If present, shows the component."}}};const AutocompleteFieldRoot=(0,styled.ZP)(FormControl.Z,{name:"ESAutocompleteField",slot:"Root",overridesResolver:(props,styles)=>styles.root})({}),AutocompleteField=inProps=>{const{className,classes:inClasses,sx,autoFocus,disabled,error,fullWidth,id:inId,label,required,closeAfterSelect,helperText,size,InputProps,InputLabelProps,FormHelperTextProps,onChange,...rest}=(0,useThemeProps.Z)({props:inProps,name:"ESAutocompleteField"}),[open,toggleOpen]=(0,useBoolean.k)(!1),id=(0,useId.Z)(inId),helperTextId=helperText&&id?`${id}-helper-text`:void 0,inputLabelId=label&&id?`${id}-label`:void 0,{onClose,onOpen,...restInputProps}=InputProps||{},classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["root"]},getAutocompleteFieldUtilityClass,classes)})({classes:inClasses});return(0,jsx_runtime.jsxs)(AutocompleteFieldRoot,{className:(0,clsx_m.Z)(classes.root,textFieldClasses.Z.root,className),disabled,error,focused:open||void 0,fullWidth,required,size,sx,children:[null!==label&&""!==label&&(0,jsx_runtime.jsx)(InputLabel.Z,{htmlFor:id,id:inputLabelId,required,...InputLabelProps,children:label}),(0,jsx_runtime.jsx)(Autocomplete,{"aria-describedby":helperTextId,autoFocus,disabled,fullWidth,id,label,open,required,onChange:e=>{onChange&&onChange(e),closeAfterSelect&&toggleOpen(!1)},onClose:()=>{onClose?.(),toggleOpen(!1)},onOpen:()=>{onOpen?.(),toggleOpen(!0)},...rest,...restInputProps}),!!helperText&&(0,jsx_runtime.jsx)(FormHelperText.Z,{id:helperTextId,...FormHelperTextProps,children:helperText})]})};function getAutocompleteMenuHeaderUtilityClass(slot){return(0,generateUtilityClass.Z)("ESAutocompleteMenuHeader",slot)}AutocompleteField.__docgenInfo={description:"The autocomplete is used to choose an item from a collection of options.",methods:[],displayName:"AutocompleteField",props:{classes:{required:!1,tsType:{name:"Partial",elements:[{name:"signature",type:"object",raw:"{\n  /** Styles applied to the root element. */\n  root: string;\n}",signature:{properties:[{key:"root",value:{name:"string",required:!0},description:"Styles applied to the root element."}]}}],raw:"Partial<AutocompleteFieldClasses>"},description:"Override or extend the styles applied to the component."},className:{required:!1,tsType:{name:"string"},description:"Class applied to the root element."},sx:{required:!1,tsType:{name:"SxProps",elements:[{name:"Theme"}],raw:"SxProps<Theme>"},description:"The system prop that allows defining system overrides as well as additional CSS styles."},closeAfterSelect:{required:!1,tsType:{name:"boolean"},description:"If true, the popover will close after menu item is selected."},helperText:{required:!1,tsType:{name:"ReactNode"},description:"The helper text content."},size:{required:!1,tsType:{name:"TextFieldProps['size']",raw:"TextFieldProps['size']"},description:"The size of the component."},InputProps:{required:!1,tsType:{name:"Partial",elements:[{name:"Omit",elements:[{name:"intersection",raw:"{\n  /** Override or extend the styles applied to the component. */\n  classes?: Partial<AutocompleteClasses>;\n  /** Class applied to the root element. */\n  className?: string;\n  /** The system prop that allows defining system overrides as well as additional CSS styles. */\n  sx?: SxProps<Theme>;\n\n  /** If true, it is possible to enter a search string in the input itself. */\n  inlineSearch?: boolean;\n\n  /** If true, the popper is opened. */\n  open?: boolean;\n  /** Callback fired when the menu requests to be opened. */\n  onOpen?: () => void;\n  /** Callback fired when the menu requests to be closed. */\n  onClose?: () => void;\n\n  /** Callback fired when the input loses focus. */\n  onBlur?: (event: { target: { name?: string } }) => void;\n\n  /** Props applied to the menu component. */\n  MenuProps?: Partial<\n    Omit<\n      AutocompleteMenuProps<T>,\n      | 'value'\n      | 'onChange'\n      | 'multiple'\n      | 'getDisplayValue'\n      | 'options'\n      | 'getOptionLabel'\n      | 'getOptionValue'\n      | 'getOptionDisabled'\n      | 'groupBy'\n    >\n  >;\n  /** Props applied to the search field component. If present, shows the component. */\n  SearchProps?: Partial<TextFieldProps>;\n} & (\n  | {\n      multiple?: false;\n      value: T | null;\n      onChange?: (value: T | null) => void;\n      getDisplayValue?: (value: T | null) => ReactNode;\n    }\n  | {\n      multiple: true;\n      value: T[];\n      onChange?: (value: T[]) => void;\n      getDisplayValue?: (value: T[]) => ReactNode;\n    }\n) &\n  Pick<\n    AutocompleteMenuProps<T>,\n    | 'options'\n    | 'getOptionLabel'\n    | 'getOptionValue'\n    | 'getOptionDisabled'\n    | 'groupBy'\n    | 'loading'\n    | 'header'\n    | 'footer'\n    | 'onLoadMore'\n  > &\n  Pick<\n    OutlinedInputProps,\n    | 'aria-describedby'\n    | 'autoFocus'\n    | 'disabled'\n    | 'endAdornment'\n    | 'error'\n    | 'fullWidth'\n    | 'id'\n    | 'inputProps'\n    | 'inputRef'\n    | 'label'\n    | 'name'\n    | 'placeholder'\n    | 'required'\n    | 'size'\n    | 'startAdornment'\n  >",elements:[{name:"signature",type:"object",raw:"{\n  /** Override or extend the styles applied to the component. */\n  classes?: Partial<AutocompleteClasses>;\n  /** Class applied to the root element. */\n  className?: string;\n  /** The system prop that allows defining system overrides as well as additional CSS styles. */\n  sx?: SxProps<Theme>;\n\n  /** If true, it is possible to enter a search string in the input itself. */\n  inlineSearch?: boolean;\n\n  /** If true, the popper is opened. */\n  open?: boolean;\n  /** Callback fired when the menu requests to be opened. */\n  onOpen?: () => void;\n  /** Callback fired when the menu requests to be closed. */\n  onClose?: () => void;\n\n  /** Callback fired when the input loses focus. */\n  onBlur?: (event: { target: { name?: string } }) => void;\n\n  /** Props applied to the menu component. */\n  MenuProps?: Partial<\n    Omit<\n      AutocompleteMenuProps<T>,\n      | 'value'\n      | 'onChange'\n      | 'multiple'\n      | 'getDisplayValue'\n      | 'options'\n      | 'getOptionLabel'\n      | 'getOptionValue'\n      | 'getOptionDisabled'\n      | 'groupBy'\n    >\n  >;\n  /** Props applied to the search field component. If present, shows the component. */\n  SearchProps?: Partial<TextFieldProps>;\n}",signature:{properties:[{key:"classes",value:{name:"Partial",elements:[{name:"signature",type:"object",raw:"{\n  /** Styles applied to the root element. */\n  root: string;\n  /** Styles applied to the input element. */\n  input: string;\n  /** Styles applied to the menu element. */\n  menu: string;\n  /** Styles applied to the display value element. */\n  displayValue: string;\n  /** Styles applied to the input placeholder element. */\n  inputPlaceholder: string;\n}",signature:{properties:[{key:"root",value:{name:"string",required:!0},description:"Styles applied to the root element."},{key:"input",value:{name:"string",required:!0},description:"Styles applied to the input element."},{key:"menu",value:{name:"string",required:!0},description:"Styles applied to the menu element."},{key:"displayValue",value:{name:"string",required:!0},description:"Styles applied to the display value element."},{key:"inputPlaceholder",value:{name:"string",required:!0},description:"Styles applied to the input placeholder element."}]}}],raw:"Partial<AutocompleteClasses>",required:!1},description:"Override or extend the styles applied to the component."},{key:"className",value:{name:"string",required:!1},description:"Class applied to the root element."},{key:"sx",value:{name:"SxProps",elements:[{name:"Theme"}],raw:"SxProps<Theme>",required:!1},description:"The system prop that allows defining system overrides as well as additional CSS styles."},{key:"inlineSearch",value:{name:"boolean",required:!1},description:"If true, it is possible to enter a search string in the input itself."},{key:"open",value:{name:"boolean",required:!1},description:"If true, the popper is opened."},{key:"onOpen",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!1},description:"Callback fired when the menu requests to be opened."},{key:"onClose",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!1},description:"Callback fired when the menu requests to be closed."},{key:"onBlur",value:{name:"signature",type:"function",raw:"(event: { target: { name?: string } }) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:"{ target: { name?: string } }",signature:{properties:[{key:"target",value:{name:"signature",type:"object",raw:"{ name?: string }",signature:{properties:[{key:"name",value:{name:"string",required:!1}}]},required:!0}}]}},name:"event"}],return:{name:"void"}},required:!1},description:"Callback fired when the input loses focus."},{key:"MenuProps",value:{name:"Partial",elements:[{name:"Omit",elements:[{name:"intersection",raw:"{\n  paperRef?: ForwardedRef<HTMLDivElement>;\n\n  /** Override or extend the styles applied to the component. */\n  classes?: Partial<AutocompleteMenuClasses>;\n  /** Class applied to the root element. */\n  className?: string;\n  /** The system prop that allows defining system overrides as well as additional CSS styles. */\n  sx?: SxProps<Theme>;\n\n  /**\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container?: HTMLElement;\n\n  /**\n   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\n   * or a function that returns either.\n   * It's used to set the position of the popper.\n   * The return value will passed as the reference object of the Popper instance.\n   */\n  anchorEl: PopperProps['anchorEl'];\n\n  /** If `true`, the component is shown. */\n  open: boolean;\n\n  /** The width of the menu. */\n  width?: number | string;\n  /** The offset from anchor element. */\n  offset?: [number, number];\n\n  /** Array of the options. */\n  options: T[];\n  /** Used to determine the value for a given option. It's used for options comparison. */\n  getOptionValue: (option: T) => number | string;\n  /** Used to determine the display value for a given option. It's used to fill the input and the list box options. */\n  getOptionLabel: (option: T) => ReactNode;\n  /** Used to determine the disabled state for a given option. */\n  getOptionDisabled?: (option: T) => boolean;\n\n  /** If provided, the options will be grouped under the returned value. */\n  groupBy?: (option: T) => number | string;\n\n  /** If true, the component is in a loading state. This shows the labelLoading in place of options (only if options are empty). */\n  loading?: boolean;\n  /** Children content for the menu header. */\n  header?: ReactNode;\n  /** Children content for the menu footer. */\n  footer?: ReactNode;\n\n  /** Callback fired when the menu requests to be closed. */\n  onClose?: (event: unknown, reason: 'escapeKeyDown' | 'clickAway') => void;\n  /** Callback fired when the menu list is scrolled to the end. */\n  onLoadMore?: () => void;\n\n  /** Props applied to the popper component. */\n  PopperProps?: Omit<Partial<PopperProps>, 'anchorEl' | 'open'>;\n  /** Props applied to the search field component. If present, shows the component. */\n  SearchProps?: Partial<TextFieldProps>;\n\n  /**\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default 'auto'\n   */\n  transitionDuration?: TransitionProps['timeout'] | 'auto';\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps?: TransitionProps;\n\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus?: boolean;\n\n  /** If `true`, the modal will not prevent focus from leaving the modal while open. */\n  disableEnforceFocus?: boolean;\n  /** If `true`, hitting escape will not fire the `onClose` callback. */\n  disableEscapeKeyDown?: boolean;\n  /** If `true`, the modal will not restore focus to previously focused element once modal is hidden or unmounted. */\n  disableRestoreFocus?: boolean;\n  /** Disable the scroll lock behavior. */\n  disableScrollLock?: boolean;\n\n  /** Text for the empty state. */\n  labelNoOptions?: ReactNode;\n  /** Text for the empty state when search value is not empty. */\n  labelNoMatches?: ReactNode;\n  /** Text for the loading state. */\n  labelLoading?: ReactNode;\n  /** Text for the search field placeholder. */\n  labelSearch?: string;\n  /** Text for the search field clear button aria-label. */\n  labelSearchClear?: string;\n\n  /** Icon for the search field startAdornment. */\n  iconSearch?: ReactNode;\n  /** Icon for the search field clear button. */\n  iconSearchClear?: ReactNode;\n} & (\n  | {\n      multiple?: false;\n      value: T | null;\n      onChange?: (value: T | null) => void;\n    }\n  | {\n      multiple: true;\n      value: T[];\n      onChange?: (value: T[]) => void;\n    }\n)",elements:[{name:"signature",type:"object",raw:"{\n  paperRef?: ForwardedRef<HTMLDivElement>;\n\n  /** Override or extend the styles applied to the component. */\n  classes?: Partial<AutocompleteMenuClasses>;\n  /** Class applied to the root element. */\n  className?: string;\n  /** The system prop that allows defining system overrides as well as additional CSS styles. */\n  sx?: SxProps<Theme>;\n\n  /**\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container?: HTMLElement;\n\n  /**\n   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\n   * or a function that returns either.\n   * It's used to set the position of the popper.\n   * The return value will passed as the reference object of the Popper instance.\n   */\n  anchorEl: PopperProps['anchorEl'];\n\n  /** If `true`, the component is shown. */\n  open: boolean;\n\n  /** The width of the menu. */\n  width?: number | string;\n  /** The offset from anchor element. */\n  offset?: [number, number];\n\n  /** Array of the options. */\n  options: T[];\n  /** Used to determine the value for a given option. It's used for options comparison. */\n  getOptionValue: (option: T) => number | string;\n  /** Used to determine the display value for a given option. It's used to fill the input and the list box options. */\n  getOptionLabel: (option: T) => ReactNode;\n  /** Used to determine the disabled state for a given option. */\n  getOptionDisabled?: (option: T) => boolean;\n\n  /** If provided, the options will be grouped under the returned value. */\n  groupBy?: (option: T) => number | string;\n\n  /** If true, the component is in a loading state. This shows the labelLoading in place of options (only if options are empty). */\n  loading?: boolean;\n  /** Children content for the menu header. */\n  header?: ReactNode;\n  /** Children content for the menu footer. */\n  footer?: ReactNode;\n\n  /** Callback fired when the menu requests to be closed. */\n  onClose?: (event: unknown, reason: 'escapeKeyDown' | 'clickAway') => void;\n  /** Callback fired when the menu list is scrolled to the end. */\n  onLoadMore?: () => void;\n\n  /** Props applied to the popper component. */\n  PopperProps?: Omit<Partial<PopperProps>, 'anchorEl' | 'open'>;\n  /** Props applied to the search field component. If present, shows the component. */\n  SearchProps?: Partial<TextFieldProps>;\n\n  /**\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default 'auto'\n   */\n  transitionDuration?: TransitionProps['timeout'] | 'auto';\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps?: TransitionProps;\n\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus?: boolean;\n\n  /** If `true`, the modal will not prevent focus from leaving the modal while open. */\n  disableEnforceFocus?: boolean;\n  /** If `true`, hitting escape will not fire the `onClose` callback. */\n  disableEscapeKeyDown?: boolean;\n  /** If `true`, the modal will not restore focus to previously focused element once modal is hidden or unmounted. */\n  disableRestoreFocus?: boolean;\n  /** Disable the scroll lock behavior. */\n  disableScrollLock?: boolean;\n\n  /** Text for the empty state. */\n  labelNoOptions?: ReactNode;\n  /** Text for the empty state when search value is not empty. */\n  labelNoMatches?: ReactNode;\n  /** Text for the loading state. */\n  labelLoading?: ReactNode;\n  /** Text for the search field placeholder. */\n  labelSearch?: string;\n  /** Text for the search field clear button aria-label. */\n  labelSearchClear?: string;\n\n  /** Icon for the search field startAdornment. */\n  iconSearch?: ReactNode;\n  /** Icon for the search field clear button. */\n  iconSearchClear?: ReactNode;\n}",signature:{properties:[{key:"paperRef",value:{name:"ForwardedRef",elements:[{name:"HTMLDivElement"}],raw:"ForwardedRef<HTMLDivElement>",required:!1}},{key:"classes",value:{name:"Partial",elements:[{name:"signature",type:"object",raw:"{\n  /** Styles applied to the root element. */\n  root: string;\n  /** Styles applied to the paper element. */\n  paper: string;\n  /** Styles applied to the menu list element. */\n  menuList: string;\n  /** Styles applied to the menu group element. */\n  menuGroup: string;\n  /** Styles applied to the menu item element. */\n  menuItem: string;\n  /** Styles applied to the menu item text element. */\n  menuItemText: string;\n  /** Styles applied to the sentinel element. */\n  sentinel: string;\n  /** Styles applied to the empty state element. */\n  emptyState: string;\n  /** Styles applied to the search field element. */\n  search: string;\n}",signature:{properties:[{key:"root",value:{name:"string",required:!0},description:"Styles applied to the root element."},{key:"paper",value:{name:"string",required:!0},description:"Styles applied to the paper element."},{key:"menuList",value:{name:"string",required:!0},description:"Styles applied to the menu list element."},{key:"menuGroup",value:{name:"string",required:!0},description:"Styles applied to the menu group element."},{key:"menuItem",value:{name:"string",required:!0},description:"Styles applied to the menu item element."},{key:"menuItemText",value:{name:"string",required:!0},description:"Styles applied to the menu item text element."},{key:"sentinel",value:{name:"string",required:!0},description:"Styles applied to the sentinel element."},{key:"emptyState",value:{name:"string",required:!0},description:"Styles applied to the empty state element."},{key:"search",value:{name:"string",required:!0},description:"Styles applied to the search field element."}]}}],raw:"Partial<AutocompleteMenuClasses>",required:!1},description:"Override or extend the styles applied to the component."},{key:"className",value:{name:"string",required:!1},description:"Class applied to the root element."},{key:"sx",value:{name:"SxProps",elements:[{name:"Theme"}],raw:"SxProps<Theme>",required:!1},description:"The system prop that allows defining system overrides as well as additional CSS styles."},{key:"container",value:{name:"HTMLElement",required:!1},description:"The `container` will have the portal children appended to it.\n\nBy default, it uses the body of the top-level document object,\nso it's simply `document.body` most of the time."},{key:"anchorEl",value:{name:"PopperProps['anchorEl']",raw:"PopperProps['anchorEl']",required:!0},description:"An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\nor a function that returns either.\nIt's used to set the position of the popper.\nThe return value will passed as the reference object of the Popper instance."},{key:"open",value:{name:"boolean",required:!0},description:"If `true`, the component is shown."},{key:"width",value:{name:"union",raw:"number | string",elements:[{name:"number"},{name:"string"}],required:!1},description:"The width of the menu."},{key:"offset",value:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}],required:!1},description:"The offset from anchor element."},{key:"options",value:{name:"Array",elements:[{name:"T"}],raw:"T[]",required:!0},description:"Array of the options."},{key:"getOptionValue",value:{name:"signature",type:"function",raw:"(option: T) => number | string",signature:{arguments:[{type:{name:"T"},name:"option"}],return:{name:"union",raw:"number | string",elements:[{name:"number"},{name:"string"}]}},required:!0},description:"Used to determine the value for a given option. It's used for options comparison."},{key:"getOptionLabel",value:{name:"signature",type:"function",raw:"(option: T) => ReactNode",signature:{arguments:[{type:{name:"T"},name:"option"}],return:{name:"ReactNode"}},required:!0},description:"Used to determine the display value for a given option. It's used to fill the input and the list box options."},{key:"getOptionDisabled",value:{name:"signature",type:"function",raw:"(option: T) => boolean",signature:{arguments:[{type:{name:"T"},name:"option"}],return:{name:"boolean"}},required:!1},description:"Used to determine the disabled state for a given option."},{key:"groupBy",value:{name:"signature",type:"function",raw:"(option: T) => number | string",signature:{arguments:[{type:{name:"T"},name:"option"}],return:{name:"union",raw:"number | string",elements:[{name:"number"},{name:"string"}]}},required:!1},description:"If provided, the options will be grouped under the returned value."},{key:"loading",value:{name:"boolean",required:!1},description:"If true, the component is in a loading state. This shows the labelLoading in place of options (only if options are empty)."},{key:"header",value:{name:"ReactNode",required:!1},description:"Children content for the menu header."},{key:"footer",value:{name:"ReactNode",required:!1},description:"Children content for the menu footer."},{key:"onClose",value:{name:"signature",type:"function",raw:"(event: unknown, reason: 'escapeKeyDown' | 'clickAway') => void",signature:{arguments:[{type:{name:"unknown"},name:"event"},{type:{name:"union",raw:"'escapeKeyDown' | 'clickAway'",elements:[{name:"literal",value:"'escapeKeyDown'"},{name:"literal",value:"'clickAway'"}]},name:"reason"}],return:{name:"void"}},required:!1},description:"Callback fired when the menu requests to be closed."},{key:"onLoadMore",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!1},description:"Callback fired when the menu list is scrolled to the end."},{key:"PopperProps",value:{name:"Omit",elements:[{name:"Partial",elements:[{name:"PopperProps"}],raw:"Partial<PopperProps>"},{name:"union",raw:"'anchorEl' | 'open'",elements:[{name:"literal",value:"'anchorEl'"},{name:"literal",value:"'open'"}]}],raw:"Omit<Partial<PopperProps>, 'anchorEl' | 'open'>",required:!1},description:"Props applied to the popper component."},{key:"SearchProps",value:{name:"Partial",elements:[{name:"TextFieldProps"}],raw:"Partial<TextFieldProps>",required:!1},description:"Props applied to the search field component. If present, shows the component."},{key:"transitionDuration",value:{name:"union",raw:"TransitionProps['timeout'] | 'auto'",elements:[{name:"TransitionProps['timeout']",raw:"TransitionProps['timeout']"},{name:"literal",value:"'auto'"}],required:!1},description:"Set to 'auto' to automatically calculate transition time based on height.\n@default 'auto'"},{key:"TransitionProps",value:{name:"TransitionProps",required:!1},description:"Props applied to the transition element.\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n@default {}"},{key:"disableAutoFocus",value:{name:"boolean",required:!1},description:"If `true`, the modal will not automatically shift focus to itself when it opens, and\nreplace it to the last focused element when it closes.\nThis also works correctly with any modal children that have the `disableAutoFocus` prop.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers."},{key:"disableEnforceFocus",value:{name:"boolean",required:!1},description:"If `true`, the modal will not prevent focus from leaving the modal while open."},{key:"disableEscapeKeyDown",value:{name:"boolean",required:!1},description:"If `true`, hitting escape will not fire the `onClose` callback."},{key:"disableRestoreFocus",value:{name:"boolean",required:!1},description:"If `true`, the modal will not restore focus to previously focused element once modal is hidden or unmounted."},{key:"disableScrollLock",value:{name:"boolean",required:!1},description:"Disable the scroll lock behavior."},{key:"labelNoOptions",value:{name:"ReactNode",required:!1},description:"Text for the empty state."},{key:"labelNoMatches",value:{name:"ReactNode",required:!1},description:"Text for the empty state when search value is not empty."},{key:"labelLoading",value:{name:"ReactNode",required:!1},description:"Text for the loading state."},{key:"labelSearch",value:{name:"string",required:!1},description:"Text for the search field placeholder."},{key:"labelSearchClear",value:{name:"string",required:!1},description:"Text for the search field clear button aria-label."},{key:"iconSearch",value:{name:"ReactNode",required:!1},description:"Icon for the search field startAdornment."},{key:"iconSearchClear",value:{name:"ReactNode",required:!1},description:"Icon for the search field clear button."}]}},{name:"unknown"}]},{name:"union",raw:"| 'value'\n| 'onChange'\n| 'multiple'\n| 'getDisplayValue'\n| 'options'\n| 'getOptionLabel'\n| 'getOptionValue'\n| 'getOptionDisabled'\n| 'groupBy'",elements:[{name:"literal",value:"'value'"},{name:"literal",value:"'onChange'"},{name:"literal",value:"'multiple'"},{name:"literal",value:"'getDisplayValue'"},{name:"literal",value:"'options'"},{name:"literal",value:"'getOptionLabel'"},{name:"literal",value:"'getOptionValue'"},{name:"literal",value:"'getOptionDisabled'"},{name:"literal",value:"'groupBy'"}]}],raw:"Omit<\n  AutocompleteMenuProps<T>,\n  | 'value'\n  | 'onChange'\n  | 'multiple'\n  | 'getDisplayValue'\n  | 'options'\n  | 'getOptionLabel'\n  | 'getOptionValue'\n  | 'getOptionDisabled'\n  | 'groupBy'\n>"}],raw:"Partial<\n  Omit<\n    AutocompleteMenuProps<T>,\n    | 'value'\n    | 'onChange'\n    | 'multiple'\n    | 'getDisplayValue'\n    | 'options'\n    | 'getOptionLabel'\n    | 'getOptionValue'\n    | 'getOptionDisabled'\n    | 'groupBy'\n  >\n>",required:!1},description:"Props applied to the menu component."},{key:"SearchProps",value:{name:"Partial",elements:[{name:"TextFieldProps"}],raw:"Partial<TextFieldProps>",required:!1},description:"Props applied to the search field component. If present, shows the component."}]}},{name:"unknown"},{name:"Pick",elements:[{name:"intersection",raw:"{\n  paperRef?: ForwardedRef<HTMLDivElement>;\n\n  /** Override or extend the styles applied to the component. */\n  classes?: Partial<AutocompleteMenuClasses>;\n  /** Class applied to the root element. */\n  className?: string;\n  /** The system prop that allows defining system overrides as well as additional CSS styles. */\n  sx?: SxProps<Theme>;\n\n  /**\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container?: HTMLElement;\n\n  /**\n   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\n   * or a function that returns either.\n   * It's used to set the position of the popper.\n   * The return value will passed as the reference object of the Popper instance.\n   */\n  anchorEl: PopperProps['anchorEl'];\n\n  /** If `true`, the component is shown. */\n  open: boolean;\n\n  /** The width of the menu. */\n  width?: number | string;\n  /** The offset from anchor element. */\n  offset?: [number, number];\n\n  /** Array of the options. */\n  options: T[];\n  /** Used to determine the value for a given option. It's used for options comparison. */\n  getOptionValue: (option: T) => number | string;\n  /** Used to determine the display value for a given option. It's used to fill the input and the list box options. */\n  getOptionLabel: (option: T) => ReactNode;\n  /** Used to determine the disabled state for a given option. */\n  getOptionDisabled?: (option: T) => boolean;\n\n  /** If provided, the options will be grouped under the returned value. */\n  groupBy?: (option: T) => number | string;\n\n  /** If true, the component is in a loading state. This shows the labelLoading in place of options (only if options are empty). */\n  loading?: boolean;\n  /** Children content for the menu header. */\n  header?: ReactNode;\n  /** Children content for the menu footer. */\n  footer?: ReactNode;\n\n  /** Callback fired when the menu requests to be closed. */\n  onClose?: (event: unknown, reason: 'escapeKeyDown' | 'clickAway') => void;\n  /** Callback fired when the menu list is scrolled to the end. */\n  onLoadMore?: () => void;\n\n  /** Props applied to the popper component. */\n  PopperProps?: Omit<Partial<PopperProps>, 'anchorEl' | 'open'>;\n  /** Props applied to the search field component. If present, shows the component. */\n  SearchProps?: Partial<TextFieldProps>;\n\n  /**\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default 'auto'\n   */\n  transitionDuration?: TransitionProps['timeout'] | 'auto';\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps?: TransitionProps;\n\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus?: boolean;\n\n  /** If `true`, the modal will not prevent focus from leaving the modal while open. */\n  disableEnforceFocus?: boolean;\n  /** If `true`, hitting escape will not fire the `onClose` callback. */\n  disableEscapeKeyDown?: boolean;\n  /** If `true`, the modal will not restore focus to previously focused element once modal is hidden or unmounted. */\n  disableRestoreFocus?: boolean;\n  /** Disable the scroll lock behavior. */\n  disableScrollLock?: boolean;\n\n  /** Text for the empty state. */\n  labelNoOptions?: ReactNode;\n  /** Text for the empty state when search value is not empty. */\n  labelNoMatches?: ReactNode;\n  /** Text for the loading state. */\n  labelLoading?: ReactNode;\n  /** Text for the search field placeholder. */\n  labelSearch?: string;\n  /** Text for the search field clear button aria-label. */\n  labelSearchClear?: string;\n\n  /** Icon for the search field startAdornment. */\n  iconSearch?: ReactNode;\n  /** Icon for the search field clear button. */\n  iconSearchClear?: ReactNode;\n} & (\n  | {\n      multiple?: false;\n      value: T | null;\n      onChange?: (value: T | null) => void;\n    }\n  | {\n      multiple: true;\n      value: T[];\n      onChange?: (value: T[]) => void;\n    }\n)",elements:[{name:"signature",type:"object",raw:"{\n  paperRef?: ForwardedRef<HTMLDivElement>;\n\n  /** Override or extend the styles applied to the component. */\n  classes?: Partial<AutocompleteMenuClasses>;\n  /** Class applied to the root element. */\n  className?: string;\n  /** The system prop that allows defining system overrides as well as additional CSS styles. */\n  sx?: SxProps<Theme>;\n\n  /**\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container?: HTMLElement;\n\n  /**\n   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\n   * or a function that returns either.\n   * It's used to set the position of the popper.\n   * The return value will passed as the reference object of the Popper instance.\n   */\n  anchorEl: PopperProps['anchorEl'];\n\n  /** If `true`, the component is shown. */\n  open: boolean;\n\n  /** The width of the menu. */\n  width?: number | string;\n  /** The offset from anchor element. */\n  offset?: [number, number];\n\n  /** Array of the options. */\n  options: T[];\n  /** Used to determine the value for a given option. It's used for options comparison. */\n  getOptionValue: (option: T) => number | string;\n  /** Used to determine the display value for a given option. It's used to fill the input and the list box options. */\n  getOptionLabel: (option: T) => ReactNode;\n  /** Used to determine the disabled state for a given option. */\n  getOptionDisabled?: (option: T) => boolean;\n\n  /** If provided, the options will be grouped under the returned value. */\n  groupBy?: (option: T) => number | string;\n\n  /** If true, the component is in a loading state. This shows the labelLoading in place of options (only if options are empty). */\n  loading?: boolean;\n  /** Children content for the menu header. */\n  header?: ReactNode;\n  /** Children content for the menu footer. */\n  footer?: ReactNode;\n\n  /** Callback fired when the menu requests to be closed. */\n  onClose?: (event: unknown, reason: 'escapeKeyDown' | 'clickAway') => void;\n  /** Callback fired when the menu list is scrolled to the end. */\n  onLoadMore?: () => void;\n\n  /** Props applied to the popper component. */\n  PopperProps?: Omit<Partial<PopperProps>, 'anchorEl' | 'open'>;\n  /** Props applied to the search field component. If present, shows the component. */\n  SearchProps?: Partial<TextFieldProps>;\n\n  /**\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default 'auto'\n   */\n  transitionDuration?: TransitionProps['timeout'] | 'auto';\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps?: TransitionProps;\n\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus?: boolean;\n\n  /** If `true`, the modal will not prevent focus from leaving the modal while open. */\n  disableEnforceFocus?: boolean;\n  /** If `true`, hitting escape will not fire the `onClose` callback. */\n  disableEscapeKeyDown?: boolean;\n  /** If `true`, the modal will not restore focus to previously focused element once modal is hidden or unmounted. */\n  disableRestoreFocus?: boolean;\n  /** Disable the scroll lock behavior. */\n  disableScrollLock?: boolean;\n\n  /** Text for the empty state. */\n  labelNoOptions?: ReactNode;\n  /** Text for the empty state when search value is not empty. */\n  labelNoMatches?: ReactNode;\n  /** Text for the loading state. */\n  labelLoading?: ReactNode;\n  /** Text for the search field placeholder. */\n  labelSearch?: string;\n  /** Text for the search field clear button aria-label. */\n  labelSearchClear?: string;\n\n  /** Icon for the search field startAdornment. */\n  iconSearch?: ReactNode;\n  /** Icon for the search field clear button. */\n  iconSearchClear?: ReactNode;\n}",signature:{properties:[{key:"paperRef",value:{name:"ForwardedRef",elements:[{name:"HTMLDivElement"}],raw:"ForwardedRef<HTMLDivElement>",required:!1}},{key:"classes",value:{name:"Partial",elements:[{name:"signature",type:"object",raw:"{\n  /** Styles applied to the root element. */\n  root: string;\n  /** Styles applied to the paper element. */\n  paper: string;\n  /** Styles applied to the menu list element. */\n  menuList: string;\n  /** Styles applied to the menu group element. */\n  menuGroup: string;\n  /** Styles applied to the menu item element. */\n  menuItem: string;\n  /** Styles applied to the menu item text element. */\n  menuItemText: string;\n  /** Styles applied to the sentinel element. */\n  sentinel: string;\n  /** Styles applied to the empty state element. */\n  emptyState: string;\n  /** Styles applied to the search field element. */\n  search: string;\n}",signature:{properties:[{key:"root",value:{name:"string",required:!0},description:"Styles applied to the root element."},{key:"paper",value:{name:"string",required:!0},description:"Styles applied to the paper element."},{key:"menuList",value:{name:"string",required:!0},description:"Styles applied to the menu list element."},{key:"menuGroup",value:{name:"string",required:!0},description:"Styles applied to the menu group element."},{key:"menuItem",value:{name:"string",required:!0},description:"Styles applied to the menu item element."},{key:"menuItemText",value:{name:"string",required:!0},description:"Styles applied to the menu item text element."},{key:"sentinel",value:{name:"string",required:!0},description:"Styles applied to the sentinel element."},{key:"emptyState",value:{name:"string",required:!0},description:"Styles applied to the empty state element."},{key:"search",value:{name:"string",required:!0},description:"Styles applied to the search field element."}]}}],raw:"Partial<AutocompleteMenuClasses>",required:!1},description:"Override or extend the styles applied to the component."},{key:"className",value:{name:"string",required:!1},description:"Class applied to the root element."},{key:"sx",value:{name:"SxProps",elements:[{name:"Theme"}],raw:"SxProps<Theme>",required:!1},description:"The system prop that allows defining system overrides as well as additional CSS styles."},{key:"container",value:{name:"HTMLElement",required:!1},description:"The `container` will have the portal children appended to it.\n\nBy default, it uses the body of the top-level document object,\nso it's simply `document.body` most of the time."},{key:"anchorEl",value:{name:"PopperProps['anchorEl']",raw:"PopperProps['anchorEl']",required:!0},description:"An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\nor a function that returns either.\nIt's used to set the position of the popper.\nThe return value will passed as the reference object of the Popper instance."},{key:"open",value:{name:"boolean",required:!0},description:"If `true`, the component is shown."},{key:"width",value:{name:"union",raw:"number | string",elements:[{name:"number"},{name:"string"}],required:!1},description:"The width of the menu."},{key:"offset",value:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}],required:!1},description:"The offset from anchor element."},{key:"options",value:{name:"Array",elements:[{name:"T"}],raw:"T[]",required:!0},description:"Array of the options."},{key:"getOptionValue",value:{name:"signature",type:"function",raw:"(option: T) => number | string",signature:{arguments:[{type:{name:"T"},name:"option"}],return:{name:"union",raw:"number | string",elements:[{name:"number"},{name:"string"}]}},required:!0},description:"Used to determine the value for a given option. It's used for options comparison."},{key:"getOptionLabel",value:{name:"signature",type:"function",raw:"(option: T) => ReactNode",signature:{arguments:[{type:{name:"T"},name:"option"}],return:{name:"ReactNode"}},required:!0},description:"Used to determine the display value for a given option. It's used to fill the input and the list box options."},{key:"getOptionDisabled",value:{name:"signature",type:"function",raw:"(option: T) => boolean",signature:{arguments:[{type:{name:"T"},name:"option"}],return:{name:"boolean"}},required:!1},description:"Used to determine the disabled state for a given option."},{key:"groupBy",value:{name:"signature",type:"function",raw:"(option: T) => number | string",signature:{arguments:[{type:{name:"T"},name:"option"}],return:{name:"union",raw:"number | string",elements:[{name:"number"},{name:"string"}]}},required:!1},description:"If provided, the options will be grouped under the returned value."},{key:"loading",value:{name:"boolean",required:!1},description:"If true, the component is in a loading state. This shows the labelLoading in place of options (only if options are empty)."},{key:"header",value:{name:"ReactNode",required:!1},description:"Children content for the menu header."},{key:"footer",value:{name:"ReactNode",required:!1},description:"Children content for the menu footer."},{key:"onClose",value:{name:"signature",type:"function",raw:"(event: unknown, reason: 'escapeKeyDown' | 'clickAway') => void",signature:{arguments:[{type:{name:"unknown"},name:"event"},{type:{name:"union",raw:"'escapeKeyDown' | 'clickAway'",elements:[{name:"literal",value:"'escapeKeyDown'"},{name:"literal",value:"'clickAway'"}]},name:"reason"}],return:{name:"void"}},required:!1},description:"Callback fired when the menu requests to be closed."},{key:"onLoadMore",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!1},description:"Callback fired when the menu list is scrolled to the end."},{key:"PopperProps",value:{name:"Omit",elements:[{name:"Partial",elements:[{name:"PopperProps"}],raw:"Partial<PopperProps>"},{name:"union",raw:"'anchorEl' | 'open'",elements:[{name:"literal",value:"'anchorEl'"},{name:"literal",value:"'open'"}]}],raw:"Omit<Partial<PopperProps>, 'anchorEl' | 'open'>",required:!1},description:"Props applied to the popper component."},{key:"SearchProps",value:{name:"Partial",elements:[{name:"TextFieldProps"}],raw:"Partial<TextFieldProps>",required:!1},description:"Props applied to the search field component. If present, shows the component."},{key:"transitionDuration",value:{name:"union",raw:"TransitionProps['timeout'] | 'auto'",elements:[{name:"TransitionProps['timeout']",raw:"TransitionProps['timeout']"},{name:"literal",value:"'auto'"}],required:!1},description:"Set to 'auto' to automatically calculate transition time based on height.\n@default 'auto'"},{key:"TransitionProps",value:{name:"TransitionProps",required:!1},description:"Props applied to the transition element.\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n@default {}"},{key:"disableAutoFocus",value:{name:"boolean",required:!1},description:"If `true`, the modal will not automatically shift focus to itself when it opens, and\nreplace it to the last focused element when it closes.\nThis also works correctly with any modal children that have the `disableAutoFocus` prop.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers."},{key:"disableEnforceFocus",value:{name:"boolean",required:!1},description:"If `true`, the modal will not prevent focus from leaving the modal while open."},{key:"disableEscapeKeyDown",value:{name:"boolean",required:!1},description:"If `true`, hitting escape will not fire the `onClose` callback."},{key:"disableRestoreFocus",value:{name:"boolean",required:!1},description:"If `true`, the modal will not restore focus to previously focused element once modal is hidden or unmounted."},{key:"disableScrollLock",value:{name:"boolean",required:!1},description:"Disable the scroll lock behavior."},{key:"labelNoOptions",value:{name:"ReactNode",required:!1},description:"Text for the empty state."},{key:"labelNoMatches",value:{name:"ReactNode",required:!1},description:"Text for the empty state when search value is not empty."},{key:"labelLoading",value:{name:"ReactNode",required:!1},description:"Text for the loading state."},{key:"labelSearch",value:{name:"string",required:!1},description:"Text for the search field placeholder."},{key:"labelSearchClear",value:{name:"string",required:!1},description:"Text for the search field clear button aria-label."},{key:"iconSearch",value:{name:"ReactNode",required:!1},description:"Icon for the search field startAdornment."},{key:"iconSearchClear",value:{name:"ReactNode",required:!1},description:"Icon for the search field clear button."}]}},{name:"unknown"}]},{name:"union",raw:"| 'options'\n| 'getOptionLabel'\n| 'getOptionValue'\n| 'getOptionDisabled'\n| 'groupBy'\n| 'loading'\n| 'header'\n| 'footer'\n| 'onLoadMore'",elements:[{name:"literal",value:"'options'"},{name:"literal",value:"'getOptionLabel'"},{name:"literal",value:"'getOptionValue'"},{name:"literal",value:"'getOptionDisabled'"},{name:"literal",value:"'groupBy'"},{name:"literal",value:"'loading'"},{name:"literal",value:"'header'"},{name:"literal",value:"'footer'"},{name:"literal",value:"'onLoadMore'"}]}],raw:"Pick<\n  AutocompleteMenuProps<T>,\n  | 'options'\n  | 'getOptionLabel'\n  | 'getOptionValue'\n  | 'getOptionDisabled'\n  | 'groupBy'\n  | 'loading'\n  | 'header'\n  | 'footer'\n  | 'onLoadMore'\n>"},{name:"Pick",elements:[{name:"OutlinedInputProps"},{name:"union",raw:"| 'aria-describedby'\n| 'autoFocus'\n| 'disabled'\n| 'endAdornment'\n| 'error'\n| 'fullWidth'\n| 'id'\n| 'inputProps'\n| 'inputRef'\n| 'label'\n| 'name'\n| 'placeholder'\n| 'required'\n| 'size'\n| 'startAdornment'",elements:[{name:"literal",value:"'aria-describedby'"},{name:"literal",value:"'autoFocus'"},{name:"literal",value:"'disabled'"},{name:"literal",value:"'endAdornment'"},{name:"literal",value:"'error'"},{name:"literal",value:"'fullWidth'"},{name:"literal",value:"'id'"},{name:"literal",value:"'inputProps'"},{name:"literal",value:"'inputRef'"},{name:"literal",value:"'label'"},{name:"literal",value:"'name'"},{name:"literal",value:"'placeholder'"},{name:"literal",value:"'required'"},{name:"literal",value:"'size'"},{name:"literal",value:"'startAdornment'"}]}],raw:"Pick<\n  OutlinedInputProps,\n  | 'aria-describedby'\n  | 'autoFocus'\n  | 'disabled'\n  | 'endAdornment'\n  | 'error'\n  | 'fullWidth'\n  | 'id'\n  | 'inputProps'\n  | 'inputRef'\n  | 'label'\n  | 'name'\n  | 'placeholder'\n  | 'required'\n  | 'size'\n  | 'startAdornment'\n>"}]},{name:"union",raw:"| 'value'\n| 'onChange'\n| 'multiple'\n| 'getDisplayValue'\n| 'options'\n| 'getOptionLabel'\n| 'getOptionValue'\n| 'getOptionDisabled'\n| 'groupBy'",elements:[{name:"literal",value:"'value'"},{name:"literal",value:"'onChange'"},{name:"literal",value:"'multiple'"},{name:"literal",value:"'getDisplayValue'"},{name:"literal",value:"'options'"},{name:"literal",value:"'getOptionLabel'"},{name:"literal",value:"'getOptionValue'"},{name:"literal",value:"'getOptionDisabled'"},{name:"literal",value:"'groupBy'"}]}],raw:"Omit<\n  AutocompleteProps<T>,\n  | 'value'\n  | 'onChange'\n  | 'multiple'\n  | 'getDisplayValue'\n  | 'options'\n  | 'getOptionLabel'\n  | 'getOptionValue'\n  | 'getOptionDisabled'\n  | 'groupBy'\n>"}],raw:"Partial<\n  Omit<\n    AutocompleteProps<T>,\n    | 'value'\n    | 'onChange'\n    | 'multiple'\n    | 'getDisplayValue'\n    | 'options'\n    | 'getOptionLabel'\n    | 'getOptionValue'\n    | 'getOptionDisabled'\n    | 'groupBy'\n  >\n>"},description:"Props applied to the `Autocomplete` element."},InputLabelProps:{required:!1,tsType:{name:"InputLabelProps"},description:"Props applied to the `InputLabel` element."},FormHelperTextProps:{required:!1,tsType:{name:"FormHelperTextProps"},description:"Props applied to the `FormHelperText` element."}}};(0,generateUtilityClasses.Z)("ESAutocompleteMenuHeader",["root"]);const AutocompleteMenuHeaderRoot=(0,styled.ZP)("div",{name:"ESAutocompleteMenuHeader",slot:"Root",overridesResolver:(props,styles)=>styles.root})((({theme})=>({...theme.typography.caption,color:theme.palette.monoA.A600,padding:"6px 16px 5px",borderBottom:`1px solid ${theme.palette.monoA.A100}`}))),AutocompleteMenuHeader=inProps=>{const{className,sx,children,...props}=(0,useThemeProps.Z)({props:inProps,name:"ESAutocompleteMenuHeader"}),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["root"]},getAutocompleteMenuHeaderUtilityClass,classes)})({...props});return(0,jsx_runtime.jsx)(AutocompleteMenuHeaderRoot,{className:(0,clsx_m.Z)(classes.root,className),sx,children})};function getAutocompleteMenuFooterUtilityClass(slot){return(0,generateUtilityClass.Z)("ESAutocompleteMenuFooter",slot)}AutocompleteMenuHeader.__docgenInfo={description:"",methods:[],displayName:"AutocompleteMenuHeader",props:{children:{required:!1,tsType:{name:"ReactNode"},description:""},classes:{required:!1,tsType:{name:"Partial",elements:[{name:"signature",type:"object",raw:"{\n  /** Styles applied to the root element. */\n  root: string;\n}",signature:{properties:[{key:"root",value:{name:"string",required:!0},description:"Styles applied to the root element."}]}}],raw:"Partial<AutocompleteMenuHeaderClasses>"},description:"Override or extend the styles applied to the component."},className:{required:!1,tsType:{name:"string"},description:"Class applied to the root element."},sx:{required:!1,tsType:{name:"SxProps",elements:[{name:"Theme"}],raw:"SxProps<Theme>"},description:"The system prop that allows defining system overrides as well as additional CSS styles."}}};(0,generateUtilityClasses.Z)("ESAutocompleteMenuFooter",["root"]);const AutocompleteMenuFooterRoot=(0,styled.ZP)("div",{name:"ESAutocompleteMenuFooter",slot:"Root",overridesResolver:(props,styles)=>styles.root})((({theme})=>({...theme.typography.caption,color:theme.palette.monoA.A600,padding:"5px 16px 6px",borderTop:`1px solid ${theme.palette.monoA.A100}`}))),AutocompleteMenuFooter=inProps=>{const{className,sx,children,...props}=(0,useThemeProps.Z)({props:inProps,name:"ESAutocompleteMenuFooter"}),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["root"]},getAutocompleteMenuFooterUtilityClass,classes)})({...props});return(0,jsx_runtime.jsx)(AutocompleteMenuFooterRoot,{className:(0,clsx_m.Z)(classes.root,className),sx,children})};AutocompleteMenuFooter.__docgenInfo={description:"",methods:[],displayName:"AutocompleteMenuFooter",props:{children:{required:!1,tsType:{name:"ReactNode"},description:""},classes:{required:!1,tsType:{name:"Partial",elements:[{name:"signature",type:"object",raw:"{\n  /** Styles applied to the root element. */\n  root: string;\n}",signature:{properties:[{key:"root",value:{name:"string",required:!0},description:"Styles applied to the root element."}]}}],raw:"Partial<AutocompleteMenuFooterClasses>"},description:"Override or extend the styles applied to the component."},className:{required:!1,tsType:{name:"string"},description:"Class applied to the root element."},sx:{required:!1,tsType:{name:"SxProps",elements:[{name:"Theme"}],raw:"SxProps<Theme>"},description:"The system prop that allows defining system overrides as well as additional CSS styles."}}};const USERS={en:[],ru:[]};for(let i=0;i<25;i++)USERS.en.push({id:i+1,name:`John Doe ${i+1}`}),USERS.ru.push({id:i+1,name:`Иванов Иван ${i+1}`});const getUserValue=user=>user.id,getUserLabel=user=>user.name,getUserLabelReactNode=user=>(0,jsx_runtime.jsx)("i",{children:user.name}),getUsersDisplayValue=users=>(0,jsx_runtime.jsx)("span",{children:users.map(((user,index)=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)("i",{children:user.name},user.id),index<users.length-1&&", "]})))}),AutocompleteField_stories={tags:["autodocs"],component:AutocompleteField,parameters:{references:["Autocomplete","AutocompleteField"]},argTypes:{multiple:{control:{type:"boolean"}},inlineSearch:{control:{type:"boolean"}},closeAfterSelect:{control:{type:"boolean"}},header:{control:{type:"text"}},footer:{control:{type:"text"}},disabled:{control:{type:"boolean"}},required:{control:{type:"boolean"}},error:{control:{type:"boolean"}},size:{options:["56","48","40","32"],control:{type:"select"}},helperText:{control:{type:"text"}},placeholder:{control:{type:"text"}},InputProps:{table:{disable:!0}},InputLabelProps:{table:{disable:!0}},FormHelperTextProps:{table:{disable:!0}},value:{table:{disable:!0}},getDisplayValue:{table:{disable:!0}},getOptionDisabled:{table:{disable:!0}},getOptionLabel:{table:{disable:!0}},getOptionValue:{table:{disable:!0}},loading:{table:{disable:!0}},options:{table:{disable:!0}}}},Demo={render:function Render(args,{globals:{locale}}){const[options,setOptions]=(0,react.useState)([]),[loading,setLoading]=(0,react.useState)(!1),[user,setUser]=(0,react.useState)(null),[users,setUsers]=(0,react.useState)([]),[search,setSearch]=(0,react.useState)("");(0,react.useEffect)((()=>{setOptions(USERS[locale]),setSearch(""),setLoading(!1)}),[locale]);const timeout=(0,react.useRef)(null);(0,react.useEffect)((()=>(setLoading(!0),timeout.current=setTimeout((()=>{setOptions(USERS[locale].filter((e=>e.name.toLowerCase().includes(search.toLowerCase())))),setLoading(!1)}),1e3),()=>{timeout.current&&(clearTimeout(timeout.current),timeout.current=null)})),[search]);const props={closeAfterSelect:args.closeAfterSelect,disabled:args.disabled,error:args.error,header:args.header&&(0,jsx_runtime.jsx)(AutocompleteMenuHeader,{children:args.header}),footer:args.footer&&(0,jsx_runtime.jsx)(AutocompleteMenuFooter,{children:args.footer}),fullWidth:!0,inlineSearch:args.inlineSearch,getOptionLabel:getUserLabel,getOptionValue:getUserValue,helperText:args.helperText,loading,options,placeholder:args.placeholder,required:args.required,size:args.size,InputProps:{SearchProps:{value:search,onChange:e=>setSearch(e.target.value)}},onBlur:args.onBlur};return(0,jsx_runtime.jsx)(Box.Z,{sx:{maxWidth:"500px"},children:args.multiple?(0,jsx_runtime.jsx)(AutocompleteField,{multiple:!0,label:"en"===locale?"Users":"Пользователи",value:users,onChange:users=>{setUsers(users)},...props}):(0,jsx_runtime.jsx)(AutocompleteField,{label:"en"===locale?"Users":"Пользователи",value:user,onChange:user=>{setUser(user),args.inlineSearch&&user&&setSearch(user.name)},...props})})}},Groups={render:function Render(_args,{globals:{locale}}){const[options,setOptions]=(0,react.useState)([]),[users,setUsers]=(0,react.useState)([]);return(0,react.useEffect)((()=>{setOptions(USERS[locale])}),[locale]),(0,jsx_runtime.jsx)(Box.Z,{sx:{maxWidth:"500px"},children:(0,jsx_runtime.jsx)(AutocompleteField,{fullWidth:!0,multiple:!0,getOptionLabel:getUserLabel,getOptionValue:getUserValue,groupBy:user=>{const base=Math.floor(user.id/10);return`${10*base} - ${10*(base+1)-1}`},label:"en"===locale?"Users":"Пользователи",options,value:users,onChange:users=>{setUsers(users)}})})}},Customization={render:function Render(_args,{globals:{locale}}){const[options,setOptions]=(0,react.useState)([]),[users,setUsers]=(0,react.useState)([]);return(0,react.useEffect)((()=>{setOptions(USERS[locale])}),[locale]),(0,jsx_runtime.jsx)(Box.Z,{sx:{maxWidth:"500px"},children:(0,jsx_runtime.jsx)(AutocompleteField,{fullWidth:!0,multiple:!0,getDisplayValue:getUsersDisplayValue,getOptionLabel:getUserLabelReactNode,getOptionValue:getUserValue,label:"en"===locale?"Users":"Пользователи",options,value:users,onChange:users=>{setUsers(users)}})})}};Demo.parameters={...Demo.parameters,docs:{...Demo.parameters?.docs,source:{originalSource:"{\n  render: function Render(args, {\n    globals: {\n      locale\n    }\n  }) {\n    const [options, setOptions] = useState<User[]>([]);\n    const [loading, setLoading] = useState(false);\n    const [user, setUser] = useState<User | null>(null);\n    const [users, setUsers] = useState<User[]>([]);\n    const [search, setSearch] = useState('');\n    const onChange = (user: User | null) => {\n      setUser(user);\n      if (args.inlineSearch && user) {\n        setSearch(user.name);\n      }\n    };\n    const onChangeUsers = (users: User[]) => {\n      setUsers(users);\n    };\n    useEffect(() => {\n      setOptions(USERS[(locale as 'en' | 'ru')]);\n      setSearch('');\n      setLoading(false);\n    }, [locale]);\n    const timeout = useRef<ReturnType<typeof setTimeout> | null>(null);\n    useEffect(() => {\n      setLoading(true);\n      timeout.current = setTimeout(() => {\n        setOptions(USERS[(locale as 'en' | 'ru')].filter(e => e.name.toLowerCase().includes(search.toLowerCase())));\n        setLoading(false);\n      }, 1000);\n      return () => {\n        if (timeout.current) {\n          clearTimeout(timeout.current);\n          timeout.current = null;\n        }\n      };\n    }, [search]);\n    const props: Pick<AutocompleteFieldProps<any>, 'closeAfterSelect' | 'disabled' | 'error' | 'inlineSearch' | 'header' | 'footer' | 'fullWidth' | 'getOptionLabel' | 'getOptionValue' | 'helperText' | 'loading' | 'options' | 'placeholder' | 'required' | 'size' | 'InputProps' | 'onBlur'> = {\n      closeAfterSelect: args.closeAfterSelect,\n      disabled: args.disabled,\n      error: args.error,\n      header: args.header && <AutocompleteMenuHeader>{args.header}</AutocompleteMenuHeader>,\n      footer: args.footer && <AutocompleteMenuFooter>{args.footer}</AutocompleteMenuFooter>,\n      fullWidth: true,\n      inlineSearch: args.inlineSearch,\n      getOptionLabel: getUserLabel,\n      getOptionValue: getUserValue,\n      helperText: args.helperText,\n      loading,\n      options,\n      placeholder: args.placeholder,\n      required: args.required,\n      size: args.size,\n      InputProps: {\n        SearchProps: {\n          value: search,\n          onChange: e => setSearch(e.target.value)\n        }\n      },\n      onBlur: args.onBlur\n    };\n    return <Box sx={{\n      maxWidth: '500px'\n    }}>\n        {args.multiple ? <AutocompleteField multiple label={locale === 'en' ? 'Users' : 'Пользователи'} value={users} onChange={onChangeUsers} {...props} /> : <AutocompleteField label={locale === 'en' ? 'Users' : 'Пользователи'} value={user} onChange={onChange} {...props} />}\n      </Box>;\n  }\n}",...Demo.parameters?.docs?.source}}},Groups.parameters={...Groups.parameters,docs:{...Groups.parameters?.docs,source:{originalSource:"{\n  render: function Render(_args, {\n    globals: {\n      locale\n    }\n  }) {\n    const [options, setOptions] = useState<User[]>([]);\n    const [users, setUsers] = useState<User[]>([]);\n    const onChangeUsers = (users: User[]) => {\n      setUsers(users);\n    };\n    useEffect(() => {\n      setOptions(USERS[(locale as 'en' | 'ru')]);\n    }, [locale]);\n    return <Box sx={{\n      maxWidth: '500px'\n    }}>\n        <AutocompleteField<User> fullWidth multiple getOptionLabel={getUserLabel} getOptionValue={getUserValue} groupBy={user => {\n        const base = Math.floor(user.id / 10);\n        return `${base * 10} - ${(base + 1) * 10 - 1}`;\n      }} label={locale === 'en' ? 'Users' : 'Пользователи'} options={options} value={users} onChange={onChangeUsers} />\n      </Box>;\n  }\n}",...Groups.parameters?.docs?.source},description:{story:"We can group the options with the `groupBy` prop. Make sure that the options are also sorted with the same dimension that they are grouped by, otherwise, you will notice duplicate headers.",...Groups.parameters?.docs?.description}}},Customization.parameters={...Customization.parameters,docs:{...Customization.parameters?.docs,source:{originalSource:"{\n  render: function Render(_args, {\n    globals: {\n      locale\n    }\n  }) {\n    const [options, setOptions] = useState<User[]>([]);\n    const [users, setUsers] = useState<User[]>([]);\n    const onChangeUsers = (users: User[]) => {\n      setUsers(users);\n    };\n    useEffect(() => {\n      setOptions(USERS[(locale as 'en' | 'ru')]);\n    }, [locale]);\n    return <Box sx={{\n      maxWidth: '500px'\n    }}>\n        <AutocompleteField<User> fullWidth multiple getDisplayValue={getUsersDisplayValue} getOptionLabel={getUserLabelReactNode} getOptionValue={getUserValue} label={locale === 'en' ? 'Users' : 'Пользователи'} options={options} value={users} onChange={onChangeUsers} />\n      </Box>;\n  }\n}",...Customization.parameters?.docs?.source}}};const __namedExportsOrder=["Demo","Groups","Customization"]}}]);
//# sourceMappingURL=AutocompleteField-AutocompleteField-stories.d81d0e05.iframe.bundle.js.map