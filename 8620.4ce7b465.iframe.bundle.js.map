{"version":3,"file":"8620.4ce7b465.iframe.bundle.js","mappings":";;;;;;;;;AA4DA","sources":["webpack://@elonkit/react/./src/components/Pagination/PaginationPages/PaginationPages.tsx"],"sourcesContent":["import { memo, useState } from 'react';\n\nimport { PaginationPagesProps } from './PaginationPages.types';\n\nimport clsx from 'clsx';\nimport { getPaginationPagesUtilityClass } from './PaginationPages.classes';\n\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\n\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { keyframes } from '@mui/system';\nimport { outlinedInputClasses } from '@mui/material';\nimport ButtonBase, { buttonBaseClasses, touchRippleClasses } from '@mui/material/ButtonBase';\nimport IconButton, { iconButtonClasses } from '@mui/material/IconButton';\nimport Pagination, { paginationClasses } from '@mui/material/Pagination';\nimport PaginationItem, { paginationItemClasses } from '@mui/material/PaginationItem';\nimport TextField from '@mui/material/TextField';\nimport Tooltip, { tooltipClasses, TooltipProps } from '@mui/material/Tooltip';\n\nimport { useDocumentEventListener } from '../../../hooks';\nimport {\n  IconArrowLeft2W300,\n  IconArrowRight2W300,\n  IconChevronLeftW400,\n  IconChevronRightW400,\n  IconDotsHorizontalW100\n} from '../../../icons';\nimport { usePaginationContext } from '../Pagination.context';\n\nconst enterKeyframe = keyframes`\n  0% {\n    transform: scale(0);\n    opacity: 0.1;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n`;\n\ntype PaginationPagesOwnerState = {\n  classes?: PaginationPagesProps['classes'];\n};\n\nconst useUtilityClasses = (ownerState: PaginationPagesOwnerState) => {\n  const { classes } = ownerState;\n\n  const slots = {\n    root: ['root'],\n    pagination: ['pagination'],\n    paginationItem: ['paginationItem'],\n    button: ['button'],\n    ellipsis: ['ellipsis'],\n    textField: ['textField'],\n    tooltip: ['tooltip']\n  };\n\n  return composeClasses(slots, getPaginationPagesUtilityClass, classes);\n};\n\nconst PaginationPagesRoot = styled('div', {\n  name: 'ESPaginationPages',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => ({\n  display: 'flex',\n  alignItems: 'center'\n}));\n\nconst PaginationPagesPagination = styled(Pagination, {\n  name: 'ESPaginationPages',\n  slot: 'Pagination',\n  overridesResolver: (props, styles) => styles.pagination\n})(() => ({\n  [`& .${paginationClasses.ul}`]: {\n    flexWrap: 'nowrap'\n  }\n}));\n\nconst PaginationPagesButton = styled(IconButton, {\n  name: 'ESPaginationPages',\n  slot: 'Button',\n  overridesResolver: (props, styles) => styles.button\n})(({ theme }) => ({\n  [`&.${iconButtonClasses.root}`]: {\n    '&, &:not(:disabled):hover, &:not(:disabled):active': {\n      color: theme.palette.monoA.A500\n    }\n  },\n  [`&.${iconButtonClasses.disabled}`]: {\n    color: theme.palette.monoA.A300\n  }\n}));\n\nconst PaginationPagesEllipsis = styled('div', {\n  name: 'ESPaginationPages',\n  slot: 'Ellipsis',\n  overridesResolver: (props, styles) => styles.ellipsis\n})(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  width: 32,\n  height: 32,\n  color: theme.palette.monoA.A500\n}));\n\nconst PaginationPagesPaginationItem = styled(PaginationItem, {\n  name: 'ESPaginationPages',\n  slot: 'PaginationItem',\n  overridesResolver: (props, styles) => styles.paginationItem\n})(({ theme }) => ({\n  [`&.${buttonBaseClasses.root}`]: {\n    ...theme.typography.caption,\n\n    margin: 0,\n    padding: '0 4px',\n\n    [`&.${paginationItemClasses.root}`]: {\n      [`& .${touchRippleClasses.root}`]: {\n        transitionDuration: `${theme.transitions.duration.short}ms`\n      }\n    },\n\n    [`& .${touchRippleClasses.rippleVisible}`]: {\n      animationName: `${enterKeyframe} !important`,\n      opacity: '1 !important'\n    },\n\n    ...theme.mixins.button({\n      background: 'transparent',\n      color: theme.palette.monoA.A600,\n      hover: theme.palette.monoA.A50,\n      focus: theme.palette.monoA.A200,\n      active: theme.palette.monoA.A150\n    }),\n\n    [`&.${paginationItemClasses.selected}`]: {\n      fontWeight: 700,\n\n      ...theme.mixins.button({\n        background: theme.palette.secondary.A100,\n        color: theme.palette.monoA.A800,\n        hover: theme.palette.secondary.A100,\n        focus: theme.palette.secondary.A200,\n        active: theme.palette.secondary.A150\n      })\n    }\n  }\n})) as typeof ButtonBase;\n\nconst PaginationPagesTextField = styled(TextField, {\n  name: 'ESPaginationPages',\n  slot: 'TextField',\n  overridesResolver: (props, styles) => styles.textField\n})(({ theme }) => ({\n  [`& .${outlinedInputClasses.root}`]: {\n    marginLeft: '16px',\n    width: '64px',\n    [`& .${outlinedInputClasses.input}`]: {\n      ...theme.typography.caption,\n\n      color: theme.palette.monoA.A600,\n      padding: '7px 8px',\n      '&::placeholder': {\n        color: theme.palette.monoA.A600\n      },\n      '&::-webkit-outer-spin-button, &::-webkit-inner-spin-button': {\n        appearance: 'none',\n        margin: 0\n      },\n      '&[type=number]': {\n        appearance: 'textfield'\n      }\n    }\n  }\n}));\n\nconst PaginationPagesTooltip = styled(\n  ({ className, ...props }: TooltipProps) => <Tooltip {...props} classes={{ popper: className }} />,\n  {\n    name: 'ESPaginationPages',\n    slot: 'Tooltip',\n    overridesResolver: (props, styles) => styles.tooltip\n  }\n)(({ theme }) => ({\n  [`& .${tooltipClasses.tooltip}`]: {\n    ...theme.typography.caption,\n\n    alignItems: 'center',\n    display: 'grid',\n    gap: 4,\n    gridAutoFlow: 'column'\n  }\n}));\n\nconst REGEX = /^[0-9]*$/;\n\nexport const PaginationPages = memo(function PaginationPages(inProps: PaginationPagesProps) {\n  const {\n    className,\n    sx,\n    boundaryCount,\n    siblingCount,\n    labelPrevPage,\n    labelNextPage,\n    labelPage,\n    iconPrevPage = <IconChevronLeftW400 />,\n    iconNextPage = <IconChevronRightW400 />,\n    iconEllipsis = <IconDotsHorizontalW100 />,\n    iconTooltipPrevPage = <IconArrowLeft2W300 />,\n    iconTooltipNextPage = <IconArrowRight2W300 />,\n    ...props\n  } = useThemeProps({\n    props: inProps,\n    name: 'ESPaginationPages'\n  });\n\n  const { count, itemsPerPage, page, onPageChange } = usePaginationContext();\n\n  const [state, setState] = useState('');\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (REGEX.test(event.target.value)) {\n      setState(event.target.value);\n    }\n  };\n\n  const onKeyPress = (event: React.KeyboardEvent) => {\n    const inputValue = (event.target as HTMLInputElement).value;\n\n    if (event.key === 'Enter' && inputValue) {\n      onPageChange(Math.min(Math.ceil(count / itemsPerPage), Math.max(1, +state)));\n      setState('');\n    }\n  };\n\n  const onPaginationPageChange = (event: React.ChangeEvent<unknown>, page: number | null) => {\n    if (page) {\n      onPageChange(page);\n    }\n  };\n\n  useDocumentEventListener('keydown', (event) => {\n    if (event.ctrlKey) {\n      if (event.key === 'ArrowLeft') {\n        onPageChange(Math.max(1, page - 1));\n      } else if (event.key === 'ArrowRight') {\n        onPageChange(Math.min(Math.ceil(count / itemsPerPage), page + 1));\n      }\n    }\n  });\n\n  const ownerState = { ...props };\n  const classes = useUtilityClasses(ownerState);\n\n  return (\n    <PaginationPagesRoot className={clsx(classes.root, className)} sx={sx}>\n      <PaginationPagesPagination\n        boundaryCount={boundaryCount}\n        className={clsx(classes.pagination)}\n        count={Math.ceil(count / itemsPerPage)}\n        page={page}\n        renderItem={(item) => {\n          switch (item.type) {\n            case 'previous':\n            case 'next':\n              return (\n                <PaginationPagesButton\n                  aria-label={`${item.type === 'next' ? labelNextPage : labelPrevPage}`}\n                  className={classes.button}\n                  disabled={item.disabled}\n                  size=\"32\"\n                  onClick={item.onClick}\n                >\n                  {item.type === 'previous' ? iconPrevPage : iconNextPage}\n                </PaginationPagesButton>\n              );\n            case 'start-ellipsis':\n            case 'end-ellipsis':\n              return <PaginationPagesEllipsis className={classes.ellipsis}>{iconEllipsis}</PaginationPagesEllipsis>;\n            default:\n              return (\n                <PaginationPagesTooltip\n                  arrow\n                  className={classes.tooltip}\n                  placement=\"top\"\n                  title={\n                    <>\n                      {iconTooltipPrevPage} Ctrl {iconTooltipNextPage}\n                    </>\n                  }\n                >\n                  <PaginationPagesPaginationItem className={clsx(classes.paginationItem)} component=\"div\" {...item} />\n                </PaginationPagesTooltip>\n              );\n          }\n        }}\n        siblingCount={siblingCount}\n        onChange={onPaginationPageChange}\n      />\n      <PaginationPagesTextField\n        className={clsx(classes.textField)}\n        placeholder={`${page} ${labelPage}`}\n        size=\"32\"\n        type=\"text\"\n        value={state}\n        onChange={onChange}\n        onKeyPress={onKeyPress}\n      />\n    </PaginationPagesRoot>\n  );\n});\n"],"names":[],"sourceRoot":""}